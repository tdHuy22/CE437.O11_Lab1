ARM GAS  /tmp/ccGpNQj9.s 			page 1


   1              		.cpu cortex-m3
   2              		.arch armv7-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.file 1 "Core/Src/main.c"
  18              		.section	.text.MX_GPIO_Init,"ax",%progbits
  19              		.align	1
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  24              	MX_GPIO_Init:
  25              	.LFB86:
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****   ******************************************************************************
   4:Core/Src/main.c ****   * @file           : main.c
   5:Core/Src/main.c ****   * @brief          : Main program body
   6:Core/Src/main.c ****   ******************************************************************************
   7:Core/Src/main.c ****   * @attention
   8:Core/Src/main.c ****   *
   9:Core/Src/main.c ****   * Copyright (c) 2023 STMicroelectronics.
  10:Core/Src/main.c ****   * All rights reserved.
  11:Core/Src/main.c ****   *
  12:Core/Src/main.c ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Core/Src/main.c ****   * in the root directory of this software component.
  14:Core/Src/main.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Core/Src/main.c ****   *
  16:Core/Src/main.c ****   ******************************************************************************
  17:Core/Src/main.c ****   */
  18:Core/Src/main.c **** /* USER CODE END Header */
  19:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  20:Core/Src/main.c **** #include "main.h"
  21:Core/Src/main.c **** 
  22:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  23:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  24:Core/Src/main.c **** #include <stdio.h> // sprintf
  25:Core/Src/main.c **** #include <string.h> // strlen
  26:Core/Src/main.c **** /* USER CODE END Includes */
  27:Core/Src/main.c **** 
  28:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  29:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  30:Core/Src/main.c **** typedef enum{
  31:Core/Src/main.c ****   RESET_BTN,
  32:Core/Src/main.c ****   WAIT,
  33:Core/Src/main.c ****   ARMING,
ARM GAS  /tmp/ccGpNQj9.s 			page 2


  34:Core/Src/main.c ****   ARMED,
  35:Core/Src/main.c ****   DRAWN,
  36:Core/Src/main.c ****   TRIGGER,
  37:Core/Src/main.c ****   HOLD,
  38:Core/Src/main.c ****   LOW_WAIT
  39:Core/Src/main.c **** }button_state_t;
  40:Core/Src/main.c **** 
  41:Core/Src/main.c **** typedef enum{
  42:Core/Src/main.c ****   mode1,
  43:Core/Src/main.c ****   mode2,
  44:Core/Src/main.c ****   mode3
  45:Core/Src/main.c **** }ledmode_t;
  46:Core/Src/main.c **** 
  47:Core/Src/main.c **** typedef enum{
  48:Core/Src/main.c ****   state1mode2,
  49:Core/Src/main.c ****   state2mode2,
  50:Core/Src/main.c ****   state3mode2
  51:Core/Src/main.c **** }ledmode2;
  52:Core/Src/main.c **** 
  53:Core/Src/main.c **** typedef enum{
  54:Core/Src/main.c ****   state1mode3,
  55:Core/Src/main.c ****   state2mode3,
  56:Core/Src/main.c ****   state3mode3,
  57:Core/Src/main.c ****   state4mode3
  58:Core/Src/main.c **** }ledmode3;
  59:Core/Src/main.c **** /* USER CODE END PTD */
  60:Core/Src/main.c **** 
  61:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
  62:Core/Src/main.c **** /* USER CODE BEGIN PD */
  63:Core/Src/main.c **** #define DEBUG 1
  64:Core/Src/main.c **** /* USER CODE END PD */
  65:Core/Src/main.c **** 
  66:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  67:Core/Src/main.c **** /* USER CODE BEGIN PM */
  68:Core/Src/main.c **** 
  69:Core/Src/main.c **** /* USER CODE END PM */
  70:Core/Src/main.c **** 
  71:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  72:Core/Src/main.c **** TIM_HandleTypeDef htim3;
  73:Core/Src/main.c **** 
  74:Core/Src/main.c **** UART_HandleTypeDef huart1;
  75:Core/Src/main.c **** 
  76:Core/Src/main.c **** /* USER CODE BEGIN PV */
  77:Core/Src/main.c **** button_state_t state_button1_t = RESET_BTN;
  78:Core/Src/main.c **** button_state_t state_button2_t = RESET_BTN;
  79:Core/Src/main.c **** button_state_t pre_state_button1_t = RESET_BTN;
  80:Core/Src/main.c **** button_state_t pre_state_button2_t = RESET_BTN;
  81:Core/Src/main.c **** GPIO_PinState state_button1 = GPIO_PIN_SET;
  82:Core/Src/main.c **** GPIO_PinState state_button2 = GPIO_PIN_SET;
  83:Core/Src/main.c **** uint32_t t_s1 = 0;
  84:Core/Src/main.c **** uint32_t t_s2 = 0;
  85:Core/Src/main.c **** uint32_t t_0_s1 = 0;
  86:Core/Src/main.c **** uint32_t t_0_s2 = 0;
  87:Core/Src/main.c **** uint32_t t_diff_s1 = 0;
  88:Core/Src/main.c **** uint32_t t_diff_s2 = 0;
  89:Core/Src/main.c **** uint32_t t_press_s1 = 0;
  90:Core/Src/main.c **** uint32_t t_press_s2 = 0;
ARM GAS  /tmp/ccGpNQj9.s 			page 3


  91:Core/Src/main.c **** uint32_t bounce_delay_s = 50;
  92:Core/Src/main.c **** uint32_t hold_delay_s = 500;
  93:Core/Src/main.c **** 
  94:Core/Src/main.c **** uint8_t initialled1 = 1;
  95:Core/Src/main.c **** 
  96:Core/Src/main.c **** uint32_t tim3scaler = 7200 - 1;
  97:Core/Src/main.c **** uint32_t tim3period = 10000 - 1;
  98:Core/Src/main.c **** 
  99:Core/Src/main.c **** 
 100:Core/Src/main.c **** ledmode_t stateofled = mode1;
 101:Core/Src/main.c **** ledmode2 mode2forled = state1mode2;
 102:Core/Src/main.c **** ledmode3 mode3forled = state1mode3;
 103:Core/Src/main.c **** 
 104:Core/Src/main.c **** uint8_t ishold1 = 0;
 105:Core/Src/main.c **** uint8_t ishold2 = 0;
 106:Core/Src/main.c **** 
 107:Core/Src/main.c **** uint8_t message[35] = {'\0'};
 108:Core/Src/main.c **** /* USER CODE END PV */
 109:Core/Src/main.c **** 
 110:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
 111:Core/Src/main.c **** void SystemClock_Config(void);
 112:Core/Src/main.c **** static void MX_GPIO_Init(void);
 113:Core/Src/main.c **** static void MX_USART1_UART_Init(void);
 114:Core/Src/main.c **** static void MX_TIM3_Init(void);
 115:Core/Src/main.c **** /* USER CODE BEGIN PFP */
 116:Core/Src/main.c **** 
 117:Core/Src/main.c **** /* USER CODE END PFP */
 118:Core/Src/main.c **** 
 119:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
 120:Core/Src/main.c **** /* USER CODE BEGIN 0 */
 121:Core/Src/main.c **** void initLED(GPIO_PinState ledbuiltin, GPIO_PinState ledr, GPIO_PinState ledg, GPIO_PinState ledb){
 122:Core/Src/main.c ****   HAL_GPIO_WritePin(ledbuiltin_GPIO_Port, ledbuiltin_Pin, ledbuiltin);
 123:Core/Src/main.c ****   HAL_GPIO_WritePin(ledred_GPIO_Port, ledred_Pin, ledr);
 124:Core/Src/main.c ****   HAL_GPIO_WritePin(ledgreen_GPIO_Port, ledgreen_Pin, ledg);
 125:Core/Src/main.c ****   HAL_GPIO_WritePin(ledblue_GPIO_Port, ledblue_Pin, ledb);
 126:Core/Src/main.c **** }
 127:Core/Src/main.c **** 
 128:Core/Src/main.c **** void function_mode1(){
 129:Core/Src/main.c ****   if (initialled1 == 1){
 130:Core/Src/main.c ****     initLED(GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_RESET);
 131:Core/Src/main.c ****     initialled1 = 0;
 132:Core/Src/main.c ****   }else{
 133:Core/Src/main.c ****     HAL_GPIO_TogglePin(ledbuiltin_GPIO_Port, ledbuiltin_Pin);
 134:Core/Src/main.c ****     HAL_GPIO_TogglePin(ledred_GPIO_Port, ledred_Pin);
 135:Core/Src/main.c ****     HAL_GPIO_TogglePin(ledgreen_GPIO_Port, ledgreen_Pin);
 136:Core/Src/main.c ****     HAL_GPIO_TogglePin(ledblue_GPIO_Port, ledblue_Pin);
 137:Core/Src/main.c ****   }
 138:Core/Src/main.c **** 
 139:Core/Src/main.c **** }
 140:Core/Src/main.c **** 
 141:Core/Src/main.c **** void function_mode2(){
 142:Core/Src/main.c ****   switch (mode2forled)
 143:Core/Src/main.c ****   {
 144:Core/Src/main.c ****   case state1mode2:
 145:Core/Src/main.c ****     initLED(GPIO_PIN_RESET, GPIO_PIN_SET, GPIO_PIN_RESET, GPIO_PIN_RESET);
 146:Core/Src/main.c ****     mode2forled = state2mode2;
 147:Core/Src/main.c ****     break;
ARM GAS  /tmp/ccGpNQj9.s 			page 4


 148:Core/Src/main.c ****   case state2mode2:
 149:Core/Src/main.c ****     initLED(GPIO_PIN_SET, GPIO_PIN_RESET, GPIO_PIN_SET, GPIO_PIN_RESET);
 150:Core/Src/main.c ****     mode2forled = state3mode2;
 151:Core/Src/main.c ****     break;
 152:Core/Src/main.c ****   case state3mode2:
 153:Core/Src/main.c ****     initLED(GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_SET);
 154:Core/Src/main.c ****     mode2forled = state1mode2;
 155:Core/Src/main.c ****     break; 
 156:Core/Src/main.c ****   default:
 157:Core/Src/main.c ****     break;
 158:Core/Src/main.c ****   }
 159:Core/Src/main.c **** }
 160:Core/Src/main.c **** 
 161:Core/Src/main.c **** void function_mode3(){
 162:Core/Src/main.c ****   switch (mode3forled)
 163:Core/Src/main.c ****   {
 164:Core/Src/main.c ****   case state1mode3:
 165:Core/Src/main.c ****     initLED(GPIO_PIN_SET, GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_RESET);
 166:Core/Src/main.c ****     mode3forled = state2mode3;
 167:Core/Src/main.c ****     break;
 168:Core/Src/main.c ****   case state2mode3:
 169:Core/Src/main.c ****     initLED(GPIO_PIN_RESET, GPIO_PIN_SET, GPIO_PIN_RESET, GPIO_PIN_RESET);
 170:Core/Src/main.c ****     mode3forled = state3mode3;
 171:Core/Src/main.c ****     break;
 172:Core/Src/main.c ****   case state3mode3:
 173:Core/Src/main.c ****     initLED(GPIO_PIN_RESET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_RESET);
 174:Core/Src/main.c ****     mode3forled = state4mode3;
 175:Core/Src/main.c ****     break; 
 176:Core/Src/main.c ****   case state4mode3:
 177:Core/Src/main.c ****     initLED(GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_SET);
 178:Core/Src/main.c ****     mode3forled = state1mode3;
 179:Core/Src/main.c ****     break;
 180:Core/Src/main.c ****   default:
 181:Core/Src/main.c ****     break;
 182:Core/Src/main.c ****   }
 183:Core/Src/main.c **** }
 184:Core/Src/main.c **** 
 185:Core/Src/main.c **** void changemodeled() {
 186:Core/Src/main.c ****   switch (stateofled)
 187:Core/Src/main.c ****   {
 188:Core/Src/main.c ****     case mode1:
 189:Core/Src/main.c ****       initialled1 = 1;
 190:Core/Src/main.c ****       stateofled = mode2;
 191:Core/Src/main.c ****       break;
 192:Core/Src/main.c ****     case mode2:
 193:Core/Src/main.c ****       stateofled = mode3;
 194:Core/Src/main.c ****       break;
 195:Core/Src/main.c ****     case mode3:
 196:Core/Src/main.c ****       stateofled = mode1;
 197:Core/Src/main.c ****       break;
 198:Core/Src/main.c ****     default:
 199:Core/Src/main.c ****       break;
 200:Core/Src/main.c ****   }
 201:Core/Src/main.c **** }
 202:Core/Src/main.c **** 
 203:Core/Src/main.c **** void SM_ledmode(void){
 204:Core/Src/main.c ****   switch (stateofled)
ARM GAS  /tmp/ccGpNQj9.s 			page 5


 205:Core/Src/main.c ****     {
 206:Core/Src/main.c ****     case mode1:
 207:Core/Src/main.c ****       function_mode1();
 208:Core/Src/main.c ****       break;
 209:Core/Src/main.c ****     case mode2:
 210:Core/Src/main.c ****       function_mode2();
 211:Core/Src/main.c ****       break;
 212:Core/Src/main.c ****     case mode3:
 213:Core/Src/main.c ****       function_mode3();
 214:Core/Src/main.c ****       break;
 215:Core/Src/main.c ****     default:
 216:Core/Src/main.c ****       break;
 217:Core/Src/main.c ****     }
 218:Core/Src/main.c **** }
 219:Core/Src/main.c **** 
 220:Core/Src/main.c **** void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 221:Core/Src/main.c **** {
 222:Core/Src/main.c ****   /* Prevent unused argument(s) compilation warning */
 223:Core/Src/main.c ****   UNUSED(htim);
 224:Core/Src/main.c **** 
 225:Core/Src/main.c ****   /* NOTE : This function should not be modified, when the callback is needed,
 226:Core/Src/main.c ****             the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
 227:Core/Src/main.c ****    */
 228:Core/Src/main.c **** 
 229:Core/Src/main.c ****   if(htim == &htim3){
 230:Core/Src/main.c ****     SM_ledmode();
 231:Core/Src/main.c ****   }
 232:Core/Src/main.c **** }
 233:Core/Src/main.c **** 
 234:Core/Src/main.c **** void SM_button1(void){
 235:Core/Src/main.c ****   state_button1 = HAL_GPIO_ReadPin(button1_GPIO_Port, button1_Pin);
 236:Core/Src/main.c ****   pre_state_button1_t = state_button1_t;
 237:Core/Src/main.c ****   switch(state_button1_t){
 238:Core/Src/main.c ****     case RESET_BTN:
 239:Core/Src/main.c ****       state_button1_t = WAIT;
 240:Core/Src/main.c ****       break;
 241:Core/Src/main.c ****     case WAIT:
 242:Core/Src/main.c ****       if (state_button1 == GPIO_PIN_RESET){
 243:Core/Src/main.c ****         state_button1_t = ARMING;
 244:Core/Src/main.c ****       }
 245:Core/Src/main.c ****       break;
 246:Core/Src/main.c ****     case ARMING:
 247:Core/Src/main.c ****       t_0_s1 = HAL_GetTick();
 248:Core/Src/main.c ****       state_button1_t = ARMED;
 249:Core/Src/main.c ****       break;
 250:Core/Src/main.c ****     case ARMED:
 251:Core/Src/main.c ****       t_s1 = HAL_GetTick();
 252:Core/Src/main.c ****       t_diff_s1 = t_s1 - t_0_s1;
 253:Core/Src/main.c ****       if (state_button1 == GPIO_PIN_SET){
 254:Core/Src/main.c ****         state_button1_t = RESET_BTN;
 255:Core/Src/main.c ****       }
 256:Core/Src/main.c ****       if(t_diff_s1 > bounce_delay_s){
 257:Core/Src/main.c ****         state_button1_t = DRAWN;
 258:Core/Src/main.c ****       }
 259:Core/Src/main.c ****       break;
 260:Core/Src/main.c ****     case DRAWN:
 261:Core/Src/main.c ****       t_s1 = HAL_GetTick();
ARM GAS  /tmp/ccGpNQj9.s 			page 6


 262:Core/Src/main.c ****       t_diff_s1 = t_s1 - t_0_s1;
 263:Core/Src/main.c ****       if (state_button1 == GPIO_PIN_SET){
 264:Core/Src/main.c ****         state_button1_t = TRIGGER;
 265:Core/Src/main.c ****       }
 266:Core/Src/main.c ****       if (t_diff_s1 > hold_delay_s){
 267:Core/Src/main.c ****         state_button1_t = HOLD;
 268:Core/Src/main.c ****       }
 269:Core/Src/main.c ****       break;
 270:Core/Src/main.c ****     case TRIGGER:
 271:Core/Src/main.c ****       state_button1_t = RESET_BTN;
 272:Core/Src/main.c ****       break;
 273:Core/Src/main.c ****     case HOLD:
 274:Core/Src/main.c ****       state_button1_t = LOW_WAIT;
 275:Core/Src/main.c ****       break;
 276:Core/Src/main.c ****     case LOW_WAIT:
 277:Core/Src/main.c ****       if (state_button1 == GPIO_PIN_SET){
 278:Core/Src/main.c ****         t_s1 = HAL_GetTick();
 279:Core/Src/main.c ****         t_press_s1 = t_s1 - t_0_s1;
 280:Core/Src/main.c ****         state_button1_t = RESET_BTN;
 281:Core/Src/main.c ****       }
 282:Core/Src/main.c ****       break;
 283:Core/Src/main.c ****     default:
 284:Core/Src/main.c ****     break;
 285:Core/Src/main.c ****   }
 286:Core/Src/main.c **** }
 287:Core/Src/main.c **** 
 288:Core/Src/main.c **** void SM_button2(void){
 289:Core/Src/main.c ****   state_button2 = HAL_GPIO_ReadPin(button2_GPIO_Port, button2_Pin);
 290:Core/Src/main.c ****   pre_state_button2_t = state_button2_t;
 291:Core/Src/main.c ****   switch(state_button2_t){
 292:Core/Src/main.c ****     case RESET_BTN:
 293:Core/Src/main.c ****       state_button2_t = WAIT;
 294:Core/Src/main.c ****       break;
 295:Core/Src/main.c ****     case WAIT:
 296:Core/Src/main.c ****       if (state_button2 == GPIO_PIN_RESET){
 297:Core/Src/main.c ****         state_button2_t = ARMING;
 298:Core/Src/main.c ****       }
 299:Core/Src/main.c ****       break;
 300:Core/Src/main.c ****     case ARMING:
 301:Core/Src/main.c ****       t_0_s2 = HAL_GetTick();
 302:Core/Src/main.c ****       state_button2_t = ARMED;
 303:Core/Src/main.c ****       break;
 304:Core/Src/main.c ****     case ARMED:
 305:Core/Src/main.c ****       t_s2 = HAL_GetTick();
 306:Core/Src/main.c ****       t_diff_s2 = t_s2 - t_0_s2;
 307:Core/Src/main.c ****       if (state_button2 == GPIO_PIN_SET){
 308:Core/Src/main.c ****         state_button2_t = RESET_BTN;
 309:Core/Src/main.c ****       }
 310:Core/Src/main.c ****       if(t_diff_s2 > bounce_delay_s){
 311:Core/Src/main.c ****         state_button2_t = DRAWN;
 312:Core/Src/main.c ****       }
 313:Core/Src/main.c ****       break;
 314:Core/Src/main.c ****     case DRAWN:
 315:Core/Src/main.c ****       t_s2 = HAL_GetTick();
 316:Core/Src/main.c ****       t_diff_s2 = t_s2 - t_0_s2;
 317:Core/Src/main.c ****       if (state_button2 == GPIO_PIN_SET){
 318:Core/Src/main.c ****         state_button2_t = TRIGGER;
ARM GAS  /tmp/ccGpNQj9.s 			page 7


 319:Core/Src/main.c ****       }
 320:Core/Src/main.c ****       if (t_diff_s2 > hold_delay_s){
 321:Core/Src/main.c ****         state_button2_t = HOLD;
 322:Core/Src/main.c ****       }
 323:Core/Src/main.c ****       break;
 324:Core/Src/main.c ****     case TRIGGER:
 325:Core/Src/main.c ****       state_button2_t = RESET_BTN;
 326:Core/Src/main.c ****       break;
 327:Core/Src/main.c ****     case HOLD:
 328:Core/Src/main.c ****       state_button2_t = LOW_WAIT;
 329:Core/Src/main.c ****       break;
 330:Core/Src/main.c ****     case LOW_WAIT:
 331:Core/Src/main.c ****       if (state_button2 == GPIO_PIN_SET){
 332:Core/Src/main.c ****         t_s2 = HAL_GetTick();
 333:Core/Src/main.c ****         t_press_s2 = t_s2 - t_0_s2;
 334:Core/Src/main.c ****         state_button2_t = RESET_BTN;
 335:Core/Src/main.c ****       }
 336:Core/Src/main.c ****       break;
 337:Core/Src/main.c ****     default:
 338:Core/Src/main.c ****     break;
 339:Core/Src/main.c ****   }
 340:Core/Src/main.c **** }
 341:Core/Src/main.c **** 
 342:Core/Src/main.c **** void print_uart(char *message){
 343:Core/Src/main.c ****   HAL_UART_Transmit(&huart1, (uint8_t*)message, strlen(message), 100);
 344:Core/Src/main.c **** }
 345:Core/Src/main.c **** 
 346:Core/Src/main.c **** void button1_pressed(void){
 347:Core/Src/main.c ****   if (HAL_TIM_Base_Stop_IT(&htim3) != HAL_OK)
 348:Core/Src/main.c ****   {
 349:Core/Src/main.c ****     Error_Handler();
 350:Core/Src/main.c ****   }
 351:Core/Src/main.c ****   if (HAL_TIM_Base_DeInit(&htim3) != HAL_OK)
 352:Core/Src/main.c ****   {
 353:Core/Src/main.c ****     Error_Handler();
 354:Core/Src/main.c ****   }
 355:Core/Src/main.c ****   if(tim3period == 999){
 356:Core/Src/main.c ****     tim3period = 20000 - 1;
 357:Core/Src/main.c ****   }else{
 358:Core/Src/main.c ****     tim3period -= 1000;
 359:Core/Src/main.c ****   }
 360:Core/Src/main.c ****   MX_TIM3_Init();
 361:Core/Src/main.c ****   if (HAL_TIM_Base_Start_IT(&htim3) != HAL_OK)
 362:Core/Src/main.c ****   {
 363:Core/Src/main.c ****     Error_Handler();
 364:Core/Src/main.c ****   }
 365:Core/Src/main.c ****   sprintf((char*)message, "Period of timer 3: %ld\r\n", tim3period);
 366:Core/Src/main.c ****   print_uart((char*)message);
 367:Core/Src/main.c ****   print_uart("BUTTON1_TRIGGERED!\r\n");
 368:Core/Src/main.c **** }
 369:Core/Src/main.c **** 
 370:Core/Src/main.c **** void button1_holdtime(void){
 371:Core/Src/main.c ****   if(ishold1 != 0){
 372:Core/Src/main.c ****     uint8_t divsion_time = t_press_s1 / 200;
 373:Core/Src/main.c ****     uint16_t decrease_time = divsion_time * 1000;
 374:Core/Src/main.c ****     if (HAL_TIM_Base_Stop_IT(&htim3) != HAL_OK)
 375:Core/Src/main.c ****     {
ARM GAS  /tmp/ccGpNQj9.s 			page 8


 376:Core/Src/main.c ****       Error_Handler();
 377:Core/Src/main.c ****     }
 378:Core/Src/main.c ****     if (HAL_TIM_Base_DeInit(&htim3) != HAL_OK)
 379:Core/Src/main.c ****     {
 380:Core/Src/main.c ****       Error_Handler();
 381:Core/Src/main.c ****     }
 382:Core/Src/main.c ****     if((int)tim3period - (int)decrease_time > 0){
 383:Core/Src/main.c ****       tim3period -= decrease_time;
 384:Core/Src/main.c ****     }else{
 385:Core/Src/main.c ****       tim3period = 20000 - 1;
 386:Core/Src/main.c ****     }
 387:Core/Src/main.c ****     MX_TIM3_Init();
 388:Core/Src/main.c ****     if (HAL_TIM_Base_Start_IT(&htim3) != HAL_OK)
 389:Core/Src/main.c ****     {
 390:Core/Src/main.c ****       Error_Handler();
 391:Core/Src/main.c ****     }
 392:Core/Src/main.c ****     sprintf((char*)message, "Period of timer 3: %ld\r\n", tim3period);
 393:Core/Src/main.c ****     print_uart((char*)message);
 394:Core/Src/main.c ****     sprintf((char*)message, "Time pressing button: %ld\r\n", t_press_s1);
 395:Core/Src/main.c ****     print_uart((char*)message);
 396:Core/Src/main.c ****   }      
 397:Core/Src/main.c ****   ishold1 = 0;
 398:Core/Src/main.c **** }
 399:Core/Src/main.c **** 
 400:Core/Src/main.c **** void button2_pressed(void){
 401:Core/Src/main.c ****   changemodeled();
 402:Core/Src/main.c ****   print_uart("BUTTON2_TRIGGERED!\r\n");
 403:Core/Src/main.c **** }
 404:Core/Src/main.c **** 
 405:Core/Src/main.c **** void button2_holdtime(void){
 406:Core/Src/main.c ****   if(ishold2 != 0){
 407:Core/Src/main.c ****     uint8_t divsion_time = t_press_s2 / 200;
 408:Core/Src/main.c ****     uint16_t increase_time = divsion_time * 1000;
 409:Core/Src/main.c ****     if (HAL_TIM_Base_Stop_IT(&htim3) != HAL_OK)
 410:Core/Src/main.c ****     {
 411:Core/Src/main.c ****       Error_Handler();
 412:Core/Src/main.c ****     }
 413:Core/Src/main.c ****     if (HAL_TIM_Base_DeInit(&htim3) != HAL_OK)
 414:Core/Src/main.c ****     {
 415:Core/Src/main.c ****       Error_Handler();
 416:Core/Src/main.c ****     }
 417:Core/Src/main.c ****     if(tim3period + increase_time > 20000 - 1){
 418:Core/Src/main.c ****       tim3period = 20000 - 1;
 419:Core/Src/main.c ****     }else{
 420:Core/Src/main.c ****       tim3period += increase_time;
 421:Core/Src/main.c ****     }  
 422:Core/Src/main.c ****     MX_TIM3_Init();
 423:Core/Src/main.c ****     if (HAL_TIM_Base_Start_IT(&htim3) != HAL_OK)
 424:Core/Src/main.c ****     {
 425:Core/Src/main.c ****       Error_Handler();
 426:Core/Src/main.c ****     }
 427:Core/Src/main.c ****     sprintf((char*)message, "Period of timer 3: %ld\r\n", tim3period);
 428:Core/Src/main.c ****     print_uart((char*)message);
 429:Core/Src/main.c ****     sprintf((char*)message, "Time pressing button: %ld\r\n", t_press_s2);
 430:Core/Src/main.c ****     print_uart((char*)message);
 431:Core/Src/main.c ****   }      
 432:Core/Src/main.c ****   ishold2 = 0;
ARM GAS  /tmp/ccGpNQj9.s 			page 9


 433:Core/Src/main.c **** }
 434:Core/Src/main.c **** 
 435:Core/Src/main.c **** /* USER CODE END 0 */
 436:Core/Src/main.c **** 
 437:Core/Src/main.c **** /**
 438:Core/Src/main.c ****   * @brief  The application entry point.
 439:Core/Src/main.c ****   * @retval int
 440:Core/Src/main.c ****   */
 441:Core/Src/main.c **** int main(void)
 442:Core/Src/main.c **** {
 443:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 444:Core/Src/main.c ****   
 445:Core/Src/main.c ****   /* USER CODE END 1 */
 446:Core/Src/main.c **** 
 447:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
 448:Core/Src/main.c **** 
 449:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 450:Core/Src/main.c ****   HAL_Init();
 451:Core/Src/main.c **** 
 452:Core/Src/main.c ****   /* USER CODE BEGIN Init */
 453:Core/Src/main.c ****   
 454:Core/Src/main.c ****   /* USER CODE END Init */
 455:Core/Src/main.c **** 
 456:Core/Src/main.c ****   /* Configure the system clock */
 457:Core/Src/main.c ****   SystemClock_Config();
 458:Core/Src/main.c **** 
 459:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
 460:Core/Src/main.c **** 
 461:Core/Src/main.c ****   /* USER CODE END SysInit */
 462:Core/Src/main.c **** 
 463:Core/Src/main.c ****   /* Initialize all configured peripherals */
 464:Core/Src/main.c ****   MX_GPIO_Init();
 465:Core/Src/main.c ****   MX_USART1_UART_Init();
 466:Core/Src/main.c ****   MX_TIM3_Init();
 467:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 468:Core/Src/main.c ****   if (HAL_TIM_Base_Start_IT(&htim3) != HAL_OK)
 469:Core/Src/main.c ****   {
 470:Core/Src/main.c ****     Error_Handler();
 471:Core/Src/main.c ****   }  
 472:Core/Src/main.c ****   /* USER CODE END 2 */
 473:Core/Src/main.c **** 
 474:Core/Src/main.c ****   /* Infinite loop */
 475:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 476:Core/Src/main.c ****   while (1)
 477:Core/Src/main.c ****   {
 478:Core/Src/main.c ****     /* USER CODE END WHILE */
 479:Core/Src/main.c **** 
 480:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 481:Core/Src/main.c ****     SM_button1();
 482:Core/Src/main.c ****     SM_button2();
 483:Core/Src/main.c ****     if (state_button1_t == TRIGGER){
 484:Core/Src/main.c ****       button1_pressed();
 485:Core/Src/main.c ****     }
 486:Core/Src/main.c ****     if (state_button1_t == HOLD){
 487:Core/Src/main.c ****       print_uart("BUTTON1_HOLD!\r\n");
 488:Core/Src/main.c ****       ishold1 = 1;
 489:Core/Src/main.c ****     }
ARM GAS  /tmp/ccGpNQj9.s 			page 10


 490:Core/Src/main.c ****     if (state_button1_t == RESET_BTN){
 491:Core/Src/main.c ****       button1_holdtime();
 492:Core/Src/main.c ****     }
 493:Core/Src/main.c **** 
 494:Core/Src/main.c ****     if (state_button2_t == TRIGGER){
 495:Core/Src/main.c ****       button2_pressed();
 496:Core/Src/main.c ****     }
 497:Core/Src/main.c ****     if (state_button2_t == HOLD){
 498:Core/Src/main.c ****       print_uart("BUTTON2_HOLD!\r\n");
 499:Core/Src/main.c ****       ishold2 = 1;
 500:Core/Src/main.c ****     }
 501:Core/Src/main.c ****     if (state_button2_t == RESET_BTN){
 502:Core/Src/main.c ****       button2_holdtime();
 503:Core/Src/main.c ****     }
 504:Core/Src/main.c **** 
 505:Core/Src/main.c ****     if (DEBUG){
 506:Core/Src/main.c ****       if(pre_state_button1_t != state_button1_t){
 507:Core/Src/main.c ****         sprintf((char*)message, "State Of Button1: %d\r\n", state_button1_t);
 508:Core/Src/main.c ****         print_uart((char*)message);
 509:Core/Src/main.c ****       }
 510:Core/Src/main.c **** 
 511:Core/Src/main.c ****       if(pre_state_button2_t != state_button2_t){
 512:Core/Src/main.c ****         sprintf((char*)message, "State Of Button2: %d\r\n", state_button2_t);
 513:Core/Src/main.c ****         print_uart((char*)message);
 514:Core/Src/main.c ****       }
 515:Core/Src/main.c ****     }
 516:Core/Src/main.c ****     
 517:Core/Src/main.c ****   }
 518:Core/Src/main.c ****   /* USER CODE END 3 */
 519:Core/Src/main.c **** }
 520:Core/Src/main.c **** 
 521:Core/Src/main.c **** /**
 522:Core/Src/main.c ****   * @brief System Clock Configuration
 523:Core/Src/main.c ****   * @retval None
 524:Core/Src/main.c ****   */
 525:Core/Src/main.c **** void SystemClock_Config(void)
 526:Core/Src/main.c **** {
 527:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 528:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 529:Core/Src/main.c **** 
 530:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 531:Core/Src/main.c ****   * in the RCC_OscInitTypeDef structure.
 532:Core/Src/main.c ****   */
 533:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 534:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 535:Core/Src/main.c ****   RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 536:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 537:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 538:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 539:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 540:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 541:Core/Src/main.c ****   {
 542:Core/Src/main.c ****     Error_Handler();
 543:Core/Src/main.c ****   }
 544:Core/Src/main.c **** 
 545:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 546:Core/Src/main.c ****   */
ARM GAS  /tmp/ccGpNQj9.s 			page 11


 547:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 548:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 549:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 550:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 551:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 552:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 553:Core/Src/main.c **** 
 554:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 555:Core/Src/main.c ****   {
 556:Core/Src/main.c ****     Error_Handler();
 557:Core/Src/main.c ****   }
 558:Core/Src/main.c **** }
 559:Core/Src/main.c **** 
 560:Core/Src/main.c **** /**
 561:Core/Src/main.c ****   * @brief TIM3 Initialization Function
 562:Core/Src/main.c ****   * @param None
 563:Core/Src/main.c ****   * @retval None
 564:Core/Src/main.c ****   */
 565:Core/Src/main.c **** static void MX_TIM3_Init(void)
 566:Core/Src/main.c **** {
 567:Core/Src/main.c **** 
 568:Core/Src/main.c ****   /* USER CODE BEGIN TIM3_Init 0 */
 569:Core/Src/main.c **** 
 570:Core/Src/main.c ****   /* USER CODE END TIM3_Init 0 */
 571:Core/Src/main.c **** 
 572:Core/Src/main.c ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 573:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 574:Core/Src/main.c **** 
 575:Core/Src/main.c ****   /* USER CODE BEGIN TIM3_Init 1 */
 576:Core/Src/main.c ****   htim3.Init.Prescaler = tim3scaler;
 577:Core/Src/main.c ****   htim3.Init.Period = tim3period;
 578:Core/Src/main.c ****   /* USER CODE END TIM3_Init 1 */
 579:Core/Src/main.c ****   htim3.Instance = TIM3;
 580:Core/Src/main.c ****   
 581:Core/Src/main.c ****   htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 582:Core/Src/main.c ****   
 583:Core/Src/main.c ****   htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 584:Core/Src/main.c ****   htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 585:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 586:Core/Src/main.c ****   {
 587:Core/Src/main.c ****     Error_Handler();
 588:Core/Src/main.c ****   }
 589:Core/Src/main.c ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 590:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 591:Core/Src/main.c ****   {
 592:Core/Src/main.c ****     Error_Handler();
 593:Core/Src/main.c ****   }
 594:Core/Src/main.c ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 595:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 596:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 597:Core/Src/main.c ****   {
 598:Core/Src/main.c ****     Error_Handler();
 599:Core/Src/main.c ****   }
 600:Core/Src/main.c ****   /* USER CODE BEGIN TIM3_Init 2 */
 601:Core/Src/main.c **** 
 602:Core/Src/main.c ****   /* USER CODE END TIM3_Init 2 */
 603:Core/Src/main.c **** 
ARM GAS  /tmp/ccGpNQj9.s 			page 12


 604:Core/Src/main.c **** }
 605:Core/Src/main.c **** 
 606:Core/Src/main.c **** /**
 607:Core/Src/main.c ****   * @brief USART1 Initialization Function
 608:Core/Src/main.c ****   * @param None
 609:Core/Src/main.c ****   * @retval None
 610:Core/Src/main.c ****   */
 611:Core/Src/main.c **** static void MX_USART1_UART_Init(void)
 612:Core/Src/main.c **** {
 613:Core/Src/main.c **** 
 614:Core/Src/main.c ****   /* USER CODE BEGIN USART1_Init 0 */
 615:Core/Src/main.c **** 
 616:Core/Src/main.c ****   /* USER CODE END USART1_Init 0 */
 617:Core/Src/main.c **** 
 618:Core/Src/main.c ****   /* USER CODE BEGIN USART1_Init 1 */
 619:Core/Src/main.c **** 
 620:Core/Src/main.c ****   /* USER CODE END USART1_Init 1 */
 621:Core/Src/main.c ****   huart1.Instance = USART1;
 622:Core/Src/main.c ****   huart1.Init.BaudRate = 115200;
 623:Core/Src/main.c ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 624:Core/Src/main.c ****   huart1.Init.StopBits = UART_STOPBITS_1;
 625:Core/Src/main.c ****   huart1.Init.Parity = UART_PARITY_NONE;
 626:Core/Src/main.c ****   huart1.Init.Mode = UART_MODE_TX_RX;
 627:Core/Src/main.c ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 628:Core/Src/main.c ****   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 629:Core/Src/main.c ****   if (HAL_UART_Init(&huart1) != HAL_OK)
 630:Core/Src/main.c ****   {
 631:Core/Src/main.c ****     Error_Handler();
 632:Core/Src/main.c ****   }
 633:Core/Src/main.c ****   /* USER CODE BEGIN USART1_Init 2 */
 634:Core/Src/main.c **** 
 635:Core/Src/main.c ****   /* USER CODE END USART1_Init 2 */
 636:Core/Src/main.c **** 
 637:Core/Src/main.c **** }
 638:Core/Src/main.c **** 
 639:Core/Src/main.c **** /**
 640:Core/Src/main.c ****   * @brief GPIO Initialization Function
 641:Core/Src/main.c ****   * @param None
 642:Core/Src/main.c ****   * @retval None
 643:Core/Src/main.c ****   */
 644:Core/Src/main.c **** static void MX_GPIO_Init(void)
 645:Core/Src/main.c **** {
  26              		.loc 1 645 1 view -0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 32
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
  31              		.cfi_def_cfa_offset 24
  32              		.cfi_offset 4, -24
  33              		.cfi_offset 5, -20
  34              		.cfi_offset 6, -16
  35              		.cfi_offset 7, -12
  36              		.cfi_offset 8, -8
  37              		.cfi_offset 14, -4
  38 0004 88B0     		sub	sp, sp, #32
  39              		.cfi_def_cfa_offset 56
 646:Core/Src/main.c ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
ARM GAS  /tmp/ccGpNQj9.s 			page 13


  40              		.loc 1 646 3 view .LVU1
  41              		.loc 1 646 20 is_stmt 0 view .LVU2
  42 0006 0024     		movs	r4, #0
  43 0008 0494     		str	r4, [sp, #16]
  44 000a 0594     		str	r4, [sp, #20]
  45 000c 0694     		str	r4, [sp, #24]
  46 000e 0794     		str	r4, [sp, #28]
 647:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_1 */
 648:Core/Src/main.c **** /* USER CODE END MX_GPIO_Init_1 */
 649:Core/Src/main.c **** 
 650:Core/Src/main.c ****   /* GPIO Ports Clock Enable */
 651:Core/Src/main.c ****   __HAL_RCC_GPIOC_CLK_ENABLE();
  47              		.loc 1 651 3 is_stmt 1 view .LVU3
  48              	.LBB4:
  49              		.loc 1 651 3 view .LVU4
  50              		.loc 1 651 3 view .LVU5
  51 0010 294B     		ldr	r3, .L3
  52 0012 9A69     		ldr	r2, [r3, #24]
  53 0014 42F01002 		orr	r2, r2, #16
  54 0018 9A61     		str	r2, [r3, #24]
  55              		.loc 1 651 3 view .LVU6
  56 001a 9A69     		ldr	r2, [r3, #24]
  57 001c 02F01002 		and	r2, r2, #16
  58 0020 0092     		str	r2, [sp]
  59              		.loc 1 651 3 view .LVU7
  60 0022 009A     		ldr	r2, [sp]
  61              	.LBE4:
  62              		.loc 1 651 3 view .LVU8
 652:Core/Src/main.c ****   __HAL_RCC_GPIOD_CLK_ENABLE();
  63              		.loc 1 652 3 view .LVU9
  64              	.LBB5:
  65              		.loc 1 652 3 view .LVU10
  66              		.loc 1 652 3 view .LVU11
  67 0024 9A69     		ldr	r2, [r3, #24]
  68 0026 42F02002 		orr	r2, r2, #32
  69 002a 9A61     		str	r2, [r3, #24]
  70              		.loc 1 652 3 view .LVU12
  71 002c 9A69     		ldr	r2, [r3, #24]
  72 002e 02F02002 		and	r2, r2, #32
  73 0032 0192     		str	r2, [sp, #4]
  74              		.loc 1 652 3 view .LVU13
  75 0034 019A     		ldr	r2, [sp, #4]
  76              	.LBE5:
  77              		.loc 1 652 3 view .LVU14
 653:Core/Src/main.c ****   __HAL_RCC_GPIOB_CLK_ENABLE();
  78              		.loc 1 653 3 view .LVU15
  79              	.LBB6:
  80              		.loc 1 653 3 view .LVU16
  81              		.loc 1 653 3 view .LVU17
  82 0036 9A69     		ldr	r2, [r3, #24]
  83 0038 42F00802 		orr	r2, r2, #8
  84 003c 9A61     		str	r2, [r3, #24]
  85              		.loc 1 653 3 view .LVU18
  86 003e 9A69     		ldr	r2, [r3, #24]
  87 0040 02F00802 		and	r2, r2, #8
  88 0044 0292     		str	r2, [sp, #8]
  89              		.loc 1 653 3 view .LVU19
ARM GAS  /tmp/ccGpNQj9.s 			page 14


  90 0046 029A     		ldr	r2, [sp, #8]
  91              	.LBE6:
  92              		.loc 1 653 3 view .LVU20
 654:Core/Src/main.c ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  93              		.loc 1 654 3 view .LVU21
  94              	.LBB7:
  95              		.loc 1 654 3 view .LVU22
  96              		.loc 1 654 3 view .LVU23
  97 0048 9A69     		ldr	r2, [r3, #24]
  98 004a 42F00402 		orr	r2, r2, #4
  99 004e 9A61     		str	r2, [r3, #24]
 100              		.loc 1 654 3 view .LVU24
 101 0050 9B69     		ldr	r3, [r3, #24]
 102 0052 03F00403 		and	r3, r3, #4
 103 0056 0393     		str	r3, [sp, #12]
 104              		.loc 1 654 3 view .LVU25
 105 0058 039B     		ldr	r3, [sp, #12]
 106              	.LBE7:
 107              		.loc 1 654 3 view .LVU26
 655:Core/Src/main.c **** 
 656:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 657:Core/Src/main.c ****   HAL_GPIO_WritePin(ledbuiltin_GPIO_Port, ledbuiltin_Pin, GPIO_PIN_RESET);
 108              		.loc 1 657 3 view .LVU27
 109 005a DFF86080 		ldr	r8, .L3+4
 110 005e 2246     		mov	r2, r4
 111 0060 4FF40051 		mov	r1, #8192
 112 0064 4046     		mov	r0, r8
 113 0066 FFF7FEFF 		bl	HAL_GPIO_WritePin
 114              	.LVL0:
 658:Core/Src/main.c **** 
 659:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 660:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOB, ledred_Pin|ledgreen_Pin|ledblue_Pin, GPIO_PIN_RESET);
 115              		.loc 1 660 3 view .LVU28
 116 006a 154D     		ldr	r5, .L3+8
 117 006c 2246     		mov	r2, r4
 118 006e 3821     		movs	r1, #56
 119 0070 2846     		mov	r0, r5
 120 0072 FFF7FEFF 		bl	HAL_GPIO_WritePin
 121              	.LVL1:
 661:Core/Src/main.c **** 
 662:Core/Src/main.c ****   /*Configure GPIO pin : lebbuiltin_Pin */
 663:Core/Src/main.c ****   GPIO_InitStruct.Pin = ledbuiltin_Pin;
 122              		.loc 1 663 3 view .LVU29
 123              		.loc 1 663 23 is_stmt 0 view .LVU30
 124 0076 4FF40053 		mov	r3, #8192
 125 007a 0493     		str	r3, [sp, #16]
 664:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 126              		.loc 1 664 3 is_stmt 1 view .LVU31
 127              		.loc 1 664 24 is_stmt 0 view .LVU32
 128 007c 0126     		movs	r6, #1
 129 007e 0596     		str	r6, [sp, #20]
 665:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 130              		.loc 1 665 3 is_stmt 1 view .LVU33
 131              		.loc 1 665 24 is_stmt 0 view .LVU34
 132 0080 0694     		str	r4, [sp, #24]
 666:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 133              		.loc 1 666 3 is_stmt 1 view .LVU35
ARM GAS  /tmp/ccGpNQj9.s 			page 15


 134              		.loc 1 666 25 is_stmt 0 view .LVU36
 135 0082 0227     		movs	r7, #2
 136 0084 0797     		str	r7, [sp, #28]
 667:Core/Src/main.c ****   HAL_GPIO_Init(ledbuiltin_GPIO_Port, &GPIO_InitStruct);
 137              		.loc 1 667 3 is_stmt 1 view .LVU37
 138 0086 04A9     		add	r1, sp, #16
 139 0088 4046     		mov	r0, r8
 140 008a FFF7FEFF 		bl	HAL_GPIO_Init
 141              	.LVL2:
 668:Core/Src/main.c **** 
 669:Core/Src/main.c ****   /*Configure GPIO pins : button1_Pin button2_Pin */
 670:Core/Src/main.c ****   GPIO_InitStruct.Pin = button1_Pin|button2_Pin;
 142              		.loc 1 670 3 view .LVU38
 143              		.loc 1 670 23 is_stmt 0 view .LVU39
 144 008e 0323     		movs	r3, #3
 145 0090 0493     		str	r3, [sp, #16]
 671:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 146              		.loc 1 671 3 is_stmt 1 view .LVU40
 147              		.loc 1 671 24 is_stmt 0 view .LVU41
 148 0092 0594     		str	r4, [sp, #20]
 672:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_PULLUP;
 149              		.loc 1 672 3 is_stmt 1 view .LVU42
 150              		.loc 1 672 24 is_stmt 0 view .LVU43
 151 0094 0696     		str	r6, [sp, #24]
 673:Core/Src/main.c ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 152              		.loc 1 673 3 is_stmt 1 view .LVU44
 153 0096 04A9     		add	r1, sp, #16
 154 0098 2846     		mov	r0, r5
 155 009a FFF7FEFF 		bl	HAL_GPIO_Init
 156              	.LVL3:
 674:Core/Src/main.c **** 
 675:Core/Src/main.c ****   /*Configure GPIO pins : ledred_Pin ledgreen_Pin ledblue_Pin */
 676:Core/Src/main.c ****   GPIO_InitStruct.Pin = ledred_Pin|ledgreen_Pin|ledblue_Pin;
 157              		.loc 1 676 3 view .LVU45
 158              		.loc 1 676 23 is_stmt 0 view .LVU46
 159 009e 3823     		movs	r3, #56
 160 00a0 0493     		str	r3, [sp, #16]
 677:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 161              		.loc 1 677 3 is_stmt 1 view .LVU47
 162              		.loc 1 677 24 is_stmt 0 view .LVU48
 163 00a2 0596     		str	r6, [sp, #20]
 678:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 164              		.loc 1 678 3 is_stmt 1 view .LVU49
 165              		.loc 1 678 24 is_stmt 0 view .LVU50
 166 00a4 0694     		str	r4, [sp, #24]
 679:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 167              		.loc 1 679 3 is_stmt 1 view .LVU51
 168              		.loc 1 679 25 is_stmt 0 view .LVU52
 169 00a6 0797     		str	r7, [sp, #28]
 680:Core/Src/main.c ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 170              		.loc 1 680 3 is_stmt 1 view .LVU53
 171 00a8 04A9     		add	r1, sp, #16
 172 00aa 2846     		mov	r0, r5
 173 00ac FFF7FEFF 		bl	HAL_GPIO_Init
 174              	.LVL4:
 681:Core/Src/main.c **** 
 682:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_2 */
ARM GAS  /tmp/ccGpNQj9.s 			page 16


 683:Core/Src/main.c **** /* USER CODE END MX_GPIO_Init_2 */
 684:Core/Src/main.c **** }
 175              		.loc 1 684 1 is_stmt 0 view .LVU54
 176 00b0 08B0     		add	sp, sp, #32
 177              		.cfi_def_cfa_offset 24
 178              		@ sp needed
 179 00b2 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 180              	.L4:
 181 00b6 00BF     		.align	2
 182              	.L3:
 183 00b8 00100240 		.word	1073876992
 184 00bc 00100140 		.word	1073811456
 185 00c0 000C0140 		.word	1073810432
 186              		.cfi_endproc
 187              	.LFE86:
 189              		.section	.text.initLED,"ax",%progbits
 190              		.align	1
 191              		.global	initLED
 192              		.syntax unified
 193              		.thumb
 194              		.thumb_func
 196              	initLED:
 197              	.LVL5:
 198              	.LFB68:
 121:Core/Src/main.c ****   HAL_GPIO_WritePin(ledbuiltin_GPIO_Port, ledbuiltin_Pin, ledbuiltin);
 199              		.loc 1 121 99 is_stmt 1 view -0
 200              		.cfi_startproc
 201              		@ args = 0, pretend = 0, frame = 0
 202              		@ frame_needed = 0, uses_anonymous_args = 0
 121:Core/Src/main.c ****   HAL_GPIO_WritePin(ledbuiltin_GPIO_Port, ledbuiltin_Pin, ledbuiltin);
 203              		.loc 1 121 99 is_stmt 0 view .LVU56
 204 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 205              		.cfi_def_cfa_offset 24
 206              		.cfi_offset 3, -24
 207              		.cfi_offset 4, -20
 208              		.cfi_offset 5, -16
 209              		.cfi_offset 6, -12
 210              		.cfi_offset 7, -8
 211              		.cfi_offset 14, -4
 212 0002 0F46     		mov	r7, r1
 213 0004 1646     		mov	r6, r2
 214 0006 1D46     		mov	r5, r3
 122:Core/Src/main.c ****   HAL_GPIO_WritePin(ledred_GPIO_Port, ledred_Pin, ledr);
 215              		.loc 1 122 3 is_stmt 1 view .LVU57
 216 0008 0246     		mov	r2, r0
 217              	.LVL6:
 122:Core/Src/main.c ****   HAL_GPIO_WritePin(ledred_GPIO_Port, ledred_Pin, ledr);
 218              		.loc 1 122 3 is_stmt 0 view .LVU58
 219 000a 4FF40051 		mov	r1, #8192
 220              	.LVL7:
 122:Core/Src/main.c ****   HAL_GPIO_WritePin(ledred_GPIO_Port, ledred_Pin, ledr);
 221              		.loc 1 122 3 view .LVU59
 222 000e 0A48     		ldr	r0, .L7
 223              	.LVL8:
 122:Core/Src/main.c ****   HAL_GPIO_WritePin(ledred_GPIO_Port, ledred_Pin, ledr);
 224              		.loc 1 122 3 view .LVU60
 225 0010 FFF7FEFF 		bl	HAL_GPIO_WritePin
ARM GAS  /tmp/ccGpNQj9.s 			page 17


 226              	.LVL9:
 123:Core/Src/main.c ****   HAL_GPIO_WritePin(ledgreen_GPIO_Port, ledgreen_Pin, ledg);
 227              		.loc 1 123 3 is_stmt 1 view .LVU61
 228 0014 094C     		ldr	r4, .L7+4
 229 0016 3A46     		mov	r2, r7
 230 0018 0821     		movs	r1, #8
 231 001a 2046     		mov	r0, r4
 232 001c FFF7FEFF 		bl	HAL_GPIO_WritePin
 233              	.LVL10:
 124:Core/Src/main.c ****   HAL_GPIO_WritePin(ledblue_GPIO_Port, ledblue_Pin, ledb);
 234              		.loc 1 124 3 view .LVU62
 235 0020 3246     		mov	r2, r6
 236 0022 1021     		movs	r1, #16
 237 0024 2046     		mov	r0, r4
 238 0026 FFF7FEFF 		bl	HAL_GPIO_WritePin
 239              	.LVL11:
 125:Core/Src/main.c **** }
 240              		.loc 1 125 3 view .LVU63
 241 002a 2A46     		mov	r2, r5
 242 002c 2021     		movs	r1, #32
 243 002e 2046     		mov	r0, r4
 244 0030 FFF7FEFF 		bl	HAL_GPIO_WritePin
 245              	.LVL12:
 126:Core/Src/main.c **** 
 246              		.loc 1 126 1 is_stmt 0 view .LVU64
 247 0034 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 248              	.L8:
 249 0036 00BF     		.align	2
 250              	.L7:
 251 0038 00100140 		.word	1073811456
 252 003c 000C0140 		.word	1073810432
 253              		.cfi_endproc
 254              	.LFE68:
 256              		.section	.text.function_mode1,"ax",%progbits
 257              		.align	1
 258              		.global	function_mode1
 259              		.syntax unified
 260              		.thumb
 261              		.thumb_func
 263              	function_mode1:
 264              	.LFB69:
 128:Core/Src/main.c ****   if (initialled1 == 1){
 265              		.loc 1 128 22 is_stmt 1 view -0
 266              		.cfi_startproc
 267              		@ args = 0, pretend = 0, frame = 0
 268              		@ frame_needed = 0, uses_anonymous_args = 0
 269 0000 10B5     		push	{r4, lr}
 270              		.cfi_def_cfa_offset 8
 271              		.cfi_offset 4, -8
 272              		.cfi_offset 14, -4
 129:Core/Src/main.c ****     initLED(GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_RESET);
 273              		.loc 1 129 3 view .LVU66
 129:Core/Src/main.c ****     initLED(GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_RESET);
 274              		.loc 1 129 19 is_stmt 0 view .LVU67
 275 0002 104B     		ldr	r3, .L14
 276 0004 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 129:Core/Src/main.c ****     initLED(GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_RESET);
ARM GAS  /tmp/ccGpNQj9.s 			page 18


 277              		.loc 1 129 6 view .LVU68
 278 0006 012B     		cmp	r3, #1
 279 0008 12D0     		beq	.L13
 133:Core/Src/main.c ****     HAL_GPIO_TogglePin(ledred_GPIO_Port, ledred_Pin);
 280              		.loc 1 133 5 is_stmt 1 view .LVU69
 281 000a 4FF40051 		mov	r1, #8192
 282 000e 0E48     		ldr	r0, .L14+4
 283 0010 FFF7FEFF 		bl	HAL_GPIO_TogglePin
 284              	.LVL13:
 134:Core/Src/main.c ****     HAL_GPIO_TogglePin(ledgreen_GPIO_Port, ledgreen_Pin);
 285              		.loc 1 134 5 view .LVU70
 286 0014 0D4C     		ldr	r4, .L14+8
 287 0016 0821     		movs	r1, #8
 288 0018 2046     		mov	r0, r4
 289 001a FFF7FEFF 		bl	HAL_GPIO_TogglePin
 290              	.LVL14:
 135:Core/Src/main.c ****     HAL_GPIO_TogglePin(ledblue_GPIO_Port, ledblue_Pin);
 291              		.loc 1 135 5 view .LVU71
 292 001e 1021     		movs	r1, #16
 293 0020 2046     		mov	r0, r4
 294 0022 FFF7FEFF 		bl	HAL_GPIO_TogglePin
 295              	.LVL15:
 136:Core/Src/main.c ****   }
 296              		.loc 1 136 5 view .LVU72
 297 0026 2021     		movs	r1, #32
 298 0028 2046     		mov	r0, r4
 299 002a FFF7FEFF 		bl	HAL_GPIO_TogglePin
 300              	.LVL16:
 301              	.L9:
 139:Core/Src/main.c **** 
 302              		.loc 1 139 1 is_stmt 0 view .LVU73
 303 002e 10BD     		pop	{r4, pc}
 304              	.L13:
 130:Core/Src/main.c ****     initialled1 = 0;
 305              		.loc 1 130 5 is_stmt 1 view .LVU74
 306 0030 0023     		movs	r3, #0
 307 0032 1A46     		mov	r2, r3
 308 0034 1946     		mov	r1, r3
 309 0036 1846     		mov	r0, r3
 310 0038 FFF7FEFF 		bl	initLED
 311              	.LVL17:
 131:Core/Src/main.c ****   }else{
 312              		.loc 1 131 5 view .LVU75
 131:Core/Src/main.c ****   }else{
 313              		.loc 1 131 17 is_stmt 0 view .LVU76
 314 003c 014B     		ldr	r3, .L14
 315 003e 0022     		movs	r2, #0
 316 0040 1A70     		strb	r2, [r3]
 317 0042 F4E7     		b	.L9
 318              	.L15:
 319              		.align	2
 320              	.L14:
 321 0044 00000000 		.word	initialled1
 322 0048 00100140 		.word	1073811456
 323 004c 000C0140 		.word	1073810432
 324              		.cfi_endproc
 325              	.LFE69:
ARM GAS  /tmp/ccGpNQj9.s 			page 19


 327              		.section	.text.function_mode2,"ax",%progbits
 328              		.align	1
 329              		.global	function_mode2
 330              		.syntax unified
 331              		.thumb
 332              		.thumb_func
 334              	function_mode2:
 335              	.LFB70:
 141:Core/Src/main.c ****   switch (mode2forled)
 336              		.loc 1 141 22 is_stmt 1 view -0
 337              		.cfi_startproc
 338              		@ args = 0, pretend = 0, frame = 0
 339              		@ frame_needed = 0, uses_anonymous_args = 0
 340 0000 08B5     		push	{r3, lr}
 341              		.cfi_def_cfa_offset 8
 342              		.cfi_offset 3, -8
 343              		.cfi_offset 14, -4
 142:Core/Src/main.c ****   {
 344              		.loc 1 142 3 view .LVU78
 345 0002 124B     		ldr	r3, .L22
 346 0004 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 347 0006 012B     		cmp	r3, #1
 348 0008 0CD0     		beq	.L17
 349 000a 022B     		cmp	r3, #2
 350 000c 14D0     		beq	.L18
 351 000e 03B1     		cbz	r3, .L21
 352              	.L16:
 159:Core/Src/main.c **** 
 353              		.loc 1 159 1 is_stmt 0 view .LVU79
 354 0010 08BD     		pop	{r3, pc}
 355              	.L21:
 145:Core/Src/main.c ****     mode2forled = state2mode2;
 356              		.loc 1 145 5 is_stmt 1 view .LVU80
 357 0012 1A46     		mov	r2, r3
 358 0014 0121     		movs	r1, #1
 359 0016 1846     		mov	r0, r3
 360 0018 FFF7FEFF 		bl	initLED
 361              	.LVL18:
 146:Core/Src/main.c ****     break;
 362              		.loc 1 146 5 view .LVU81
 146:Core/Src/main.c ****     break;
 363              		.loc 1 146 17 is_stmt 0 view .LVU82
 364 001c 0B4B     		ldr	r3, .L22
 365 001e 0122     		movs	r2, #1
 366 0020 1A70     		strb	r2, [r3]
 147:Core/Src/main.c ****   case state2mode2:
 367              		.loc 1 147 5 is_stmt 1 view .LVU83
 368 0022 F5E7     		b	.L16
 369              	.L17:
 149:Core/Src/main.c ****     mode2forled = state3mode2;
 370              		.loc 1 149 5 view .LVU84
 371 0024 0023     		movs	r3, #0
 372 0026 0122     		movs	r2, #1
 373 0028 1946     		mov	r1, r3
 374 002a 1046     		mov	r0, r2
 375 002c FFF7FEFF 		bl	initLED
 376              	.LVL19:
ARM GAS  /tmp/ccGpNQj9.s 			page 20


 150:Core/Src/main.c ****     break;
 377              		.loc 1 150 5 view .LVU85
 150:Core/Src/main.c ****     break;
 378              		.loc 1 150 17 is_stmt 0 view .LVU86
 379 0030 064B     		ldr	r3, .L22
 380 0032 0222     		movs	r2, #2
 381 0034 1A70     		strb	r2, [r3]
 151:Core/Src/main.c ****   case state3mode2:
 382              		.loc 1 151 5 is_stmt 1 view .LVU87
 383 0036 EBE7     		b	.L16
 384              	.L18:
 153:Core/Src/main.c ****     mode2forled = state1mode2;
 385              		.loc 1 153 5 view .LVU88
 386 0038 0123     		movs	r3, #1
 387 003a 0022     		movs	r2, #0
 388 003c 1146     		mov	r1, r2
 389 003e 1046     		mov	r0, r2
 390 0040 FFF7FEFF 		bl	initLED
 391              	.LVL20:
 154:Core/Src/main.c ****     break; 
 392              		.loc 1 154 5 view .LVU89
 154:Core/Src/main.c ****     break; 
 393              		.loc 1 154 17 is_stmt 0 view .LVU90
 394 0044 014B     		ldr	r3, .L22
 395 0046 0022     		movs	r2, #0
 396 0048 1A70     		strb	r2, [r3]
 155:Core/Src/main.c ****   default:
 397              		.loc 1 155 5 is_stmt 1 view .LVU91
 159:Core/Src/main.c **** 
 398              		.loc 1 159 1 is_stmt 0 view .LVU92
 399 004a E1E7     		b	.L16
 400              	.L23:
 401              		.align	2
 402              	.L22:
 403 004c 00000000 		.word	mode2forled
 404              		.cfi_endproc
 405              	.LFE70:
 407              		.section	.text.function_mode3,"ax",%progbits
 408              		.align	1
 409              		.global	function_mode3
 410              		.syntax unified
 411              		.thumb
 412              		.thumb_func
 414              	function_mode3:
 415              	.LFB71:
 161:Core/Src/main.c ****   switch (mode3forled)
 416              		.loc 1 161 22 is_stmt 1 view -0
 417              		.cfi_startproc
 418              		@ args = 0, pretend = 0, frame = 0
 419              		@ frame_needed = 0, uses_anonymous_args = 0
 420 0000 08B5     		push	{r3, lr}
 421              		.cfi_def_cfa_offset 8
 422              		.cfi_offset 3, -8
 423              		.cfi_offset 14, -4
 162:Core/Src/main.c ****   {
 424              		.loc 1 162 3 view .LVU94
 425 0002 184B     		ldr	r3, .L33
ARM GAS  /tmp/ccGpNQj9.s 			page 21


 426 0004 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 427 0006 032B     		cmp	r3, #3
 428 0008 0CD8     		bhi	.L24
 429 000a DFE803F0 		tbb	[pc, r3]
 430              	.L27:
 431 000e 02       		.byte	(.L30-.L27)/2
 432 000f 0C       		.byte	(.L29-.L27)/2
 433 0010 16       		.byte	(.L28-.L27)/2
 434 0011 20       		.byte	(.L26-.L27)/2
 435              		.p2align 1
 436              	.L30:
 165:Core/Src/main.c ****     mode3forled = state2mode3;
 437              		.loc 1 165 5 view .LVU95
 438 0012 0023     		movs	r3, #0
 439 0014 1A46     		mov	r2, r3
 440 0016 1946     		mov	r1, r3
 441 0018 0120     		movs	r0, #1
 442 001a FFF7FEFF 		bl	initLED
 443              	.LVL21:
 166:Core/Src/main.c ****     break;
 444              		.loc 1 166 5 view .LVU96
 166:Core/Src/main.c ****     break;
 445              		.loc 1 166 17 is_stmt 0 view .LVU97
 446 001e 114B     		ldr	r3, .L33
 447 0020 0122     		movs	r2, #1
 448 0022 1A70     		strb	r2, [r3]
 167:Core/Src/main.c ****   case state2mode3:
 449              		.loc 1 167 5 is_stmt 1 view .LVU98
 450              	.L24:
 183:Core/Src/main.c **** 
 451              		.loc 1 183 1 is_stmt 0 view .LVU99
 452 0024 08BD     		pop	{r3, pc}
 453              	.L29:
 169:Core/Src/main.c ****     mode3forled = state3mode3;
 454              		.loc 1 169 5 is_stmt 1 view .LVU100
 455 0026 0023     		movs	r3, #0
 456 0028 1A46     		mov	r2, r3
 457 002a 0121     		movs	r1, #1
 458 002c 1846     		mov	r0, r3
 459 002e FFF7FEFF 		bl	initLED
 460              	.LVL22:
 170:Core/Src/main.c ****     break;
 461              		.loc 1 170 5 view .LVU101
 170:Core/Src/main.c ****     break;
 462              		.loc 1 170 17 is_stmt 0 view .LVU102
 463 0032 0C4B     		ldr	r3, .L33
 464 0034 0222     		movs	r2, #2
 465 0036 1A70     		strb	r2, [r3]
 171:Core/Src/main.c ****   case state3mode3:
 466              		.loc 1 171 5 is_stmt 1 view .LVU103
 467 0038 F4E7     		b	.L24
 468              	.L28:
 173:Core/Src/main.c ****     mode3forled = state4mode3;
 469              		.loc 1 173 5 view .LVU104
 470 003a 0023     		movs	r3, #0
 471 003c 0122     		movs	r2, #1
 472 003e 1146     		mov	r1, r2
ARM GAS  /tmp/ccGpNQj9.s 			page 22


 473 0040 1846     		mov	r0, r3
 474 0042 FFF7FEFF 		bl	initLED
 475              	.LVL23:
 174:Core/Src/main.c ****     break; 
 476              		.loc 1 174 5 view .LVU105
 174:Core/Src/main.c ****     break; 
 477              		.loc 1 174 17 is_stmt 0 view .LVU106
 478 0046 074B     		ldr	r3, .L33
 479 0048 0322     		movs	r2, #3
 480 004a 1A70     		strb	r2, [r3]
 175:Core/Src/main.c ****   case state4mode3:
 481              		.loc 1 175 5 is_stmt 1 view .LVU107
 482 004c EAE7     		b	.L24
 483              	.L26:
 177:Core/Src/main.c ****     mode3forled = state1mode3;
 484              		.loc 1 177 5 view .LVU108
 485 004e 0123     		movs	r3, #1
 486 0050 1A46     		mov	r2, r3
 487 0052 1946     		mov	r1, r3
 488 0054 1846     		mov	r0, r3
 489 0056 FFF7FEFF 		bl	initLED
 490              	.LVL24:
 178:Core/Src/main.c ****     break;
 491              		.loc 1 178 5 view .LVU109
 178:Core/Src/main.c ****     break;
 492              		.loc 1 178 17 is_stmt 0 view .LVU110
 493 005a 024B     		ldr	r3, .L33
 494 005c 0022     		movs	r2, #0
 495 005e 1A70     		strb	r2, [r3]
 179:Core/Src/main.c ****   default:
 496              		.loc 1 179 5 is_stmt 1 view .LVU111
 183:Core/Src/main.c **** 
 497              		.loc 1 183 1 is_stmt 0 view .LVU112
 498 0060 E0E7     		b	.L24
 499              	.L34:
 500 0062 00BF     		.align	2
 501              	.L33:
 502 0064 00000000 		.word	mode3forled
 503              		.cfi_endproc
 504              	.LFE71:
 506              		.section	.text.changemodeled,"ax",%progbits
 507              		.align	1
 508              		.global	changemodeled
 509              		.syntax unified
 510              		.thumb
 511              		.thumb_func
 513              	changemodeled:
 514              	.LFB72:
 185:Core/Src/main.c ****   switch (stateofled)
 515              		.loc 1 185 22 is_stmt 1 view -0
 516              		.cfi_startproc
 517              		@ args = 0, pretend = 0, frame = 0
 518              		@ frame_needed = 0, uses_anonymous_args = 0
 519              		@ link register save eliminated.
 186:Core/Src/main.c ****   {
 520              		.loc 1 186 3 view .LVU114
 521 0000 0A4B     		ldr	r3, .L40
ARM GAS  /tmp/ccGpNQj9.s 			page 23


 522 0002 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 523 0004 012B     		cmp	r3, #1
 524 0006 09D0     		beq	.L36
 525 0008 022B     		cmp	r3, #2
 526 000a 0BD0     		beq	.L37
 527 000c 03B1     		cbz	r3, .L39
 528              	.L35:
 201:Core/Src/main.c **** 
 529              		.loc 1 201 1 is_stmt 0 view .LVU115
 530 000e 7047     		bx	lr
 531              	.L39:
 189:Core/Src/main.c ****       stateofled = mode2;
 532              		.loc 1 189 7 is_stmt 1 view .LVU116
 189:Core/Src/main.c ****       stateofled = mode2;
 533              		.loc 1 189 19 is_stmt 0 view .LVU117
 534 0010 0123     		movs	r3, #1
 535 0012 074A     		ldr	r2, .L40+4
 536 0014 1370     		strb	r3, [r2]
 190:Core/Src/main.c ****       break;
 537              		.loc 1 190 7 is_stmt 1 view .LVU118
 190:Core/Src/main.c ****       break;
 538              		.loc 1 190 18 is_stmt 0 view .LVU119
 539 0016 054A     		ldr	r2, .L40
 540 0018 1370     		strb	r3, [r2]
 191:Core/Src/main.c ****     case mode2:
 541              		.loc 1 191 7 is_stmt 1 view .LVU120
 542 001a 7047     		bx	lr
 543              	.L36:
 193:Core/Src/main.c ****       break;
 544              		.loc 1 193 7 view .LVU121
 193:Core/Src/main.c ****       break;
 545              		.loc 1 193 18 is_stmt 0 view .LVU122
 546 001c 034B     		ldr	r3, .L40
 547 001e 0222     		movs	r2, #2
 548 0020 1A70     		strb	r2, [r3]
 194:Core/Src/main.c ****     case mode3:
 549              		.loc 1 194 7 is_stmt 1 view .LVU123
 550 0022 7047     		bx	lr
 551              	.L37:
 196:Core/Src/main.c ****       break;
 552              		.loc 1 196 7 view .LVU124
 196:Core/Src/main.c ****       break;
 553              		.loc 1 196 18 is_stmt 0 view .LVU125
 554 0024 014B     		ldr	r3, .L40
 555 0026 0022     		movs	r2, #0
 556 0028 1A70     		strb	r2, [r3]
 197:Core/Src/main.c ****     default:
 557              		.loc 1 197 7 is_stmt 1 view .LVU126
 201:Core/Src/main.c **** 
 558              		.loc 1 201 1 is_stmt 0 view .LVU127
 559 002a F0E7     		b	.L35
 560              	.L41:
 561              		.align	2
 562              	.L40:
 563 002c 00000000 		.word	stateofled
 564 0030 00000000 		.word	initialled1
 565              		.cfi_endproc
ARM GAS  /tmp/ccGpNQj9.s 			page 24


 566              	.LFE72:
 568              		.section	.text.SM_ledmode,"ax",%progbits
 569              		.align	1
 570              		.global	SM_ledmode
 571              		.syntax unified
 572              		.thumb
 573              		.thumb_func
 575              	SM_ledmode:
 576              	.LFB73:
 203:Core/Src/main.c ****   switch (stateofled)
 577              		.loc 1 203 22 is_stmt 1 view -0
 578              		.cfi_startproc
 579              		@ args = 0, pretend = 0, frame = 0
 580              		@ frame_needed = 0, uses_anonymous_args = 0
 581 0000 08B5     		push	{r3, lr}
 582              		.cfi_def_cfa_offset 8
 583              		.cfi_offset 3, -8
 584              		.cfi_offset 14, -4
 204:Core/Src/main.c ****     {
 585              		.loc 1 204 3 view .LVU129
 586 0002 084B     		ldr	r3, .L48
 587 0004 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 588 0006 012B     		cmp	r3, #1
 589 0008 06D0     		beq	.L43
 590 000a 022B     		cmp	r3, #2
 591 000c 07D0     		beq	.L44
 592 000e 03B1     		cbz	r3, .L47
 593              	.L42:
 218:Core/Src/main.c **** 
 594              		.loc 1 218 1 is_stmt 0 view .LVU130
 595 0010 08BD     		pop	{r3, pc}
 596              	.L47:
 207:Core/Src/main.c ****       break;
 597              		.loc 1 207 7 is_stmt 1 view .LVU131
 598 0012 FFF7FEFF 		bl	function_mode1
 599              	.LVL25:
 208:Core/Src/main.c ****     case mode2:
 600              		.loc 1 208 7 view .LVU132
 601 0016 FBE7     		b	.L42
 602              	.L43:
 210:Core/Src/main.c ****       break;
 603              		.loc 1 210 7 view .LVU133
 604 0018 FFF7FEFF 		bl	function_mode2
 605              	.LVL26:
 211:Core/Src/main.c ****     case mode3:
 606              		.loc 1 211 7 view .LVU134
 607 001c F8E7     		b	.L42
 608              	.L44:
 213:Core/Src/main.c ****       break;
 609              		.loc 1 213 7 view .LVU135
 610 001e FFF7FEFF 		bl	function_mode3
 611              	.LVL27:
 214:Core/Src/main.c ****     default:
 612              		.loc 1 214 7 view .LVU136
 218:Core/Src/main.c **** 
 613              		.loc 1 218 1 is_stmt 0 view .LVU137
 614 0022 F5E7     		b	.L42
ARM GAS  /tmp/ccGpNQj9.s 			page 25


 615              	.L49:
 616              		.align	2
 617              	.L48:
 618 0024 00000000 		.word	stateofled
 619              		.cfi_endproc
 620              	.LFE73:
 622              		.section	.text.HAL_TIM_PeriodElapsedCallback,"ax",%progbits
 623              		.align	1
 624              		.global	HAL_TIM_PeriodElapsedCallback
 625              		.syntax unified
 626              		.thumb
 627              		.thumb_func
 629              	HAL_TIM_PeriodElapsedCallback:
 630              	.LVL28:
 631              	.LFB74:
 221:Core/Src/main.c ****   /* Prevent unused argument(s) compilation warning */
 632              		.loc 1 221 1 is_stmt 1 view -0
 633              		.cfi_startproc
 634              		@ args = 0, pretend = 0, frame = 0
 635              		@ frame_needed = 0, uses_anonymous_args = 0
 221:Core/Src/main.c ****   /* Prevent unused argument(s) compilation warning */
 636              		.loc 1 221 1 is_stmt 0 view .LVU139
 637 0000 08B5     		push	{r3, lr}
 638              		.cfi_def_cfa_offset 8
 639              		.cfi_offset 3, -8
 640              		.cfi_offset 14, -4
 223:Core/Src/main.c **** 
 641              		.loc 1 223 3 is_stmt 1 view .LVU140
 229:Core/Src/main.c ****     SM_ledmode();
 642              		.loc 1 229 3 view .LVU141
 229:Core/Src/main.c ****     SM_ledmode();
 643              		.loc 1 229 5 is_stmt 0 view .LVU142
 644 0002 034B     		ldr	r3, .L54
 645 0004 8342     		cmp	r3, r0
 646 0006 00D0     		beq	.L53
 647              	.LVL29:
 648              	.L50:
 232:Core/Src/main.c **** 
 649              		.loc 1 232 1 view .LVU143
 650 0008 08BD     		pop	{r3, pc}
 651              	.LVL30:
 652              	.L53:
 230:Core/Src/main.c ****   }
 653              		.loc 1 230 5 is_stmt 1 view .LVU144
 654 000a FFF7FEFF 		bl	SM_ledmode
 655              	.LVL31:
 232:Core/Src/main.c **** 
 656              		.loc 1 232 1 is_stmt 0 view .LVU145
 657 000e FBE7     		b	.L50
 658              	.L55:
 659              		.align	2
 660              	.L54:
 661 0010 00000000 		.word	htim3
 662              		.cfi_endproc
 663              	.LFE74:
 665              		.section	.text.SM_button1,"ax",%progbits
 666              		.align	1
ARM GAS  /tmp/ccGpNQj9.s 			page 26


 667              		.global	SM_button1
 668              		.syntax unified
 669              		.thumb
 670              		.thumb_func
 672              	SM_button1:
 673              	.LFB75:
 234:Core/Src/main.c ****   state_button1 = HAL_GPIO_ReadPin(button1_GPIO_Port, button1_Pin);
 674              		.loc 1 234 22 is_stmt 1 view -0
 675              		.cfi_startproc
 676              		@ args = 0, pretend = 0, frame = 0
 677              		@ frame_needed = 0, uses_anonymous_args = 0
 678 0000 08B5     		push	{r3, lr}
 679              		.cfi_def_cfa_offset 8
 680              		.cfi_offset 3, -8
 681              		.cfi_offset 14, -4
 235:Core/Src/main.c ****   pre_state_button1_t = state_button1_t;
 682              		.loc 1 235 3 view .LVU147
 235:Core/Src/main.c ****   pre_state_button1_t = state_button1_t;
 683              		.loc 1 235 19 is_stmt 0 view .LVU148
 684 0002 0121     		movs	r1, #1
 685 0004 3548     		ldr	r0, .L73
 686 0006 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 687              	.LVL32:
 235:Core/Src/main.c ****   pre_state_button1_t = state_button1_t;
 688              		.loc 1 235 17 view .LVU149
 689 000a 354B     		ldr	r3, .L73+4
 690 000c 1870     		strb	r0, [r3]
 236:Core/Src/main.c ****   switch(state_button1_t){
 691              		.loc 1 236 3 is_stmt 1 view .LVU150
 236:Core/Src/main.c ****   switch(state_button1_t){
 692              		.loc 1 236 23 is_stmt 0 view .LVU151
 693 000e 354B     		ldr	r3, .L73+8
 694 0010 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 695 0012 354A     		ldr	r2, .L73+12
 696 0014 1370     		strb	r3, [r2]
 237:Core/Src/main.c ****     case RESET_BTN:
 697              		.loc 1 237 3 is_stmt 1 view .LVU152
 698 0016 072B     		cmp	r3, #7
 699 0018 08D8     		bhi	.L56
 700 001a DFE803F0 		tbb	[pc, r3]
 701              	.L59:
 702 001e 04       		.byte	(.L66-.L59)/2
 703 001f 08       		.byte	(.L65-.L59)/2
 704 0020 0E       		.byte	(.L64-.L59)/2
 705 0021 16       		.byte	(.L63-.L59)/2
 706 0022 2F       		.byte	(.L62-.L59)/2
 707 0023 48       		.byte	(.L61-.L59)/2
 708 0024 4C       		.byte	(.L60-.L59)/2
 709 0025 50       		.byte	(.L58-.L59)/2
 710              		.p2align 1
 711              	.L66:
 239:Core/Src/main.c ****       break;
 712              		.loc 1 239 7 view .LVU153
 239:Core/Src/main.c ****       break;
 713              		.loc 1 239 23 is_stmt 0 view .LVU154
 714 0026 2F4B     		ldr	r3, .L73+8
 715 0028 0122     		movs	r2, #1
ARM GAS  /tmp/ccGpNQj9.s 			page 27


 716 002a 1A70     		strb	r2, [r3]
 240:Core/Src/main.c ****     case WAIT:
 717              		.loc 1 240 7 is_stmt 1 view .LVU155
 718              	.L56:
 286:Core/Src/main.c **** 
 719              		.loc 1 286 1 is_stmt 0 view .LVU156
 720 002c 08BD     		pop	{r3, pc}
 721              	.L65:
 242:Core/Src/main.c ****         state_button1_t = ARMING;
 722              		.loc 1 242 7 is_stmt 1 view .LVU157
 242:Core/Src/main.c ****         state_button1_t = ARMING;
 723              		.loc 1 242 10 is_stmt 0 view .LVU158
 724 002e 0028     		cmp	r0, #0
 725 0030 FCD1     		bne	.L56
 243:Core/Src/main.c ****       }
 726              		.loc 1 243 9 is_stmt 1 view .LVU159
 243:Core/Src/main.c ****       }
 727              		.loc 1 243 25 is_stmt 0 view .LVU160
 728 0032 2C4B     		ldr	r3, .L73+8
 729 0034 0222     		movs	r2, #2
 730 0036 1A70     		strb	r2, [r3]
 731 0038 F8E7     		b	.L56
 732              	.L64:
 247:Core/Src/main.c ****       state_button1_t = ARMED;
 733              		.loc 1 247 7 is_stmt 1 view .LVU161
 247:Core/Src/main.c ****       state_button1_t = ARMED;
 734              		.loc 1 247 16 is_stmt 0 view .LVU162
 735 003a FFF7FEFF 		bl	HAL_GetTick
 736              	.LVL33:
 247:Core/Src/main.c ****       state_button1_t = ARMED;
 737              		.loc 1 247 14 view .LVU163
 738 003e 2B4B     		ldr	r3, .L73+16
 739 0040 1860     		str	r0, [r3]
 248:Core/Src/main.c ****       break;
 740              		.loc 1 248 7 is_stmt 1 view .LVU164
 248:Core/Src/main.c ****       break;
 741              		.loc 1 248 23 is_stmt 0 view .LVU165
 742 0042 284B     		ldr	r3, .L73+8
 743 0044 0322     		movs	r2, #3
 744 0046 1A70     		strb	r2, [r3]
 249:Core/Src/main.c ****     case ARMED:
 745              		.loc 1 249 7 is_stmt 1 view .LVU166
 746 0048 F0E7     		b	.L56
 747              	.L63:
 251:Core/Src/main.c ****       t_diff_s1 = t_s1 - t_0_s1;
 748              		.loc 1 251 7 view .LVU167
 251:Core/Src/main.c ****       t_diff_s1 = t_s1 - t_0_s1;
 749              		.loc 1 251 14 is_stmt 0 view .LVU168
 750 004a FFF7FEFF 		bl	HAL_GetTick
 751              	.LVL34:
 251:Core/Src/main.c ****       t_diff_s1 = t_s1 - t_0_s1;
 752              		.loc 1 251 12 view .LVU169
 753 004e 284B     		ldr	r3, .L73+20
 754 0050 1860     		str	r0, [r3]
 252:Core/Src/main.c ****       if (state_button1 == GPIO_PIN_SET){
 755              		.loc 1 252 7 is_stmt 1 view .LVU170
 252:Core/Src/main.c ****       if (state_button1 == GPIO_PIN_SET){
ARM GAS  /tmp/ccGpNQj9.s 			page 28


 756              		.loc 1 252 24 is_stmt 0 view .LVU171
 757 0052 264B     		ldr	r3, .L73+16
 758 0054 1B68     		ldr	r3, [r3]
 759 0056 C01A     		subs	r0, r0, r3
 252:Core/Src/main.c ****       if (state_button1 == GPIO_PIN_SET){
 760              		.loc 1 252 17 view .LVU172
 761 0058 264B     		ldr	r3, .L73+24
 762 005a 1860     		str	r0, [r3]
 253:Core/Src/main.c ****         state_button1_t = RESET_BTN;
 763              		.loc 1 253 7 is_stmt 1 view .LVU173
 253:Core/Src/main.c ****         state_button1_t = RESET_BTN;
 764              		.loc 1 253 25 is_stmt 0 view .LVU174
 765 005c 204B     		ldr	r3, .L73+4
 766 005e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 253:Core/Src/main.c ****         state_button1_t = RESET_BTN;
 767              		.loc 1 253 10 view .LVU175
 768 0060 012B     		cmp	r3, #1
 769 0062 07D0     		beq	.L71
 770              	.L67:
 256:Core/Src/main.c ****         state_button1_t = DRAWN;
 771              		.loc 1 256 7 is_stmt 1 view .LVU176
 256:Core/Src/main.c ****         state_button1_t = DRAWN;
 772              		.loc 1 256 20 is_stmt 0 view .LVU177
 773 0064 244B     		ldr	r3, .L73+28
 774 0066 1B68     		ldr	r3, [r3]
 256:Core/Src/main.c ****         state_button1_t = DRAWN;
 775              		.loc 1 256 9 view .LVU178
 776 0068 9842     		cmp	r0, r3
 777 006a DFD9     		bls	.L56
 257:Core/Src/main.c ****       }
 778              		.loc 1 257 9 is_stmt 1 view .LVU179
 257:Core/Src/main.c ****       }
 779              		.loc 1 257 25 is_stmt 0 view .LVU180
 780 006c 1D4B     		ldr	r3, .L73+8
 781 006e 0422     		movs	r2, #4
 782 0070 1A70     		strb	r2, [r3]
 783 0072 DBE7     		b	.L56
 784              	.L71:
 254:Core/Src/main.c ****       }
 785              		.loc 1 254 9 is_stmt 1 view .LVU181
 254:Core/Src/main.c ****       }
 786              		.loc 1 254 25 is_stmt 0 view .LVU182
 787 0074 1B4B     		ldr	r3, .L73+8
 788 0076 0022     		movs	r2, #0
 789 0078 1A70     		strb	r2, [r3]
 790 007a F3E7     		b	.L67
 791              	.L62:
 261:Core/Src/main.c ****       t_diff_s1 = t_s1 - t_0_s1;
 792              		.loc 1 261 7 is_stmt 1 view .LVU183
 261:Core/Src/main.c ****       t_diff_s1 = t_s1 - t_0_s1;
 793              		.loc 1 261 14 is_stmt 0 view .LVU184
 794 007c FFF7FEFF 		bl	HAL_GetTick
 795              	.LVL35:
 261:Core/Src/main.c ****       t_diff_s1 = t_s1 - t_0_s1;
 796              		.loc 1 261 12 view .LVU185
 797 0080 1B4B     		ldr	r3, .L73+20
 798 0082 1860     		str	r0, [r3]
ARM GAS  /tmp/ccGpNQj9.s 			page 29


 262:Core/Src/main.c ****       if (state_button1 == GPIO_PIN_SET){
 799              		.loc 1 262 7 is_stmt 1 view .LVU186
 262:Core/Src/main.c ****       if (state_button1 == GPIO_PIN_SET){
 800              		.loc 1 262 24 is_stmt 0 view .LVU187
 801 0084 194B     		ldr	r3, .L73+16
 802 0086 1B68     		ldr	r3, [r3]
 803 0088 C01A     		subs	r0, r0, r3
 262:Core/Src/main.c ****       if (state_button1 == GPIO_PIN_SET){
 804              		.loc 1 262 17 view .LVU188
 805 008a 1A4B     		ldr	r3, .L73+24
 806 008c 1860     		str	r0, [r3]
 263:Core/Src/main.c ****         state_button1_t = TRIGGER;
 807              		.loc 1 263 7 is_stmt 1 view .LVU189
 263:Core/Src/main.c ****         state_button1_t = TRIGGER;
 808              		.loc 1 263 25 is_stmt 0 view .LVU190
 809 008e 144B     		ldr	r3, .L73+4
 810 0090 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 263:Core/Src/main.c ****         state_button1_t = TRIGGER;
 811              		.loc 1 263 10 view .LVU191
 812 0092 012B     		cmp	r3, #1
 813 0094 07D0     		beq	.L72
 814              	.L68:
 266:Core/Src/main.c ****         state_button1_t = HOLD;
 815              		.loc 1 266 7 is_stmt 1 view .LVU192
 266:Core/Src/main.c ****         state_button1_t = HOLD;
 816              		.loc 1 266 21 is_stmt 0 view .LVU193
 817 0096 194B     		ldr	r3, .L73+32
 818 0098 1B68     		ldr	r3, [r3]
 266:Core/Src/main.c ****         state_button1_t = HOLD;
 819              		.loc 1 266 10 view .LVU194
 820 009a 9842     		cmp	r0, r3
 821 009c C6D9     		bls	.L56
 267:Core/Src/main.c ****       }
 822              		.loc 1 267 9 is_stmt 1 view .LVU195
 267:Core/Src/main.c ****       }
 823              		.loc 1 267 25 is_stmt 0 view .LVU196
 824 009e 114B     		ldr	r3, .L73+8
 825 00a0 0622     		movs	r2, #6
 826 00a2 1A70     		strb	r2, [r3]
 827 00a4 C2E7     		b	.L56
 828              	.L72:
 264:Core/Src/main.c ****       }
 829              		.loc 1 264 9 is_stmt 1 view .LVU197
 264:Core/Src/main.c ****       }
 830              		.loc 1 264 25 is_stmt 0 view .LVU198
 831 00a6 0F4B     		ldr	r3, .L73+8
 832 00a8 0522     		movs	r2, #5
 833 00aa 1A70     		strb	r2, [r3]
 834 00ac F3E7     		b	.L68
 835              	.L61:
 271:Core/Src/main.c ****       break;
 836              		.loc 1 271 7 is_stmt 1 view .LVU199
 271:Core/Src/main.c ****       break;
 837              		.loc 1 271 23 is_stmt 0 view .LVU200
 838 00ae 0D4B     		ldr	r3, .L73+8
 839 00b0 0022     		movs	r2, #0
 840 00b2 1A70     		strb	r2, [r3]
ARM GAS  /tmp/ccGpNQj9.s 			page 30


 272:Core/Src/main.c ****     case HOLD:
 841              		.loc 1 272 7 is_stmt 1 view .LVU201
 842 00b4 BAE7     		b	.L56
 843              	.L60:
 274:Core/Src/main.c ****       break;
 844              		.loc 1 274 7 view .LVU202
 274:Core/Src/main.c ****       break;
 845              		.loc 1 274 23 is_stmt 0 view .LVU203
 846 00b6 0B4B     		ldr	r3, .L73+8
 847 00b8 0722     		movs	r2, #7
 848 00ba 1A70     		strb	r2, [r3]
 275:Core/Src/main.c ****     case LOW_WAIT:
 849              		.loc 1 275 7 is_stmt 1 view .LVU204
 850 00bc B6E7     		b	.L56
 851              	.L58:
 277:Core/Src/main.c ****         t_s1 = HAL_GetTick();
 852              		.loc 1 277 7 view .LVU205
 277:Core/Src/main.c ****         t_s1 = HAL_GetTick();
 853              		.loc 1 277 10 is_stmt 0 view .LVU206
 854 00be 0128     		cmp	r0, #1
 855 00c0 B4D1     		bne	.L56
 278:Core/Src/main.c ****         t_press_s1 = t_s1 - t_0_s1;
 856              		.loc 1 278 9 is_stmt 1 view .LVU207
 278:Core/Src/main.c ****         t_press_s1 = t_s1 - t_0_s1;
 857              		.loc 1 278 16 is_stmt 0 view .LVU208
 858 00c2 FFF7FEFF 		bl	HAL_GetTick
 859              	.LVL36:
 278:Core/Src/main.c ****         t_press_s1 = t_s1 - t_0_s1;
 860              		.loc 1 278 14 view .LVU209
 861 00c6 0A4B     		ldr	r3, .L73+20
 862 00c8 1860     		str	r0, [r3]
 279:Core/Src/main.c ****         state_button1_t = RESET_BTN;
 863              		.loc 1 279 9 is_stmt 1 view .LVU210
 279:Core/Src/main.c ****         state_button1_t = RESET_BTN;
 864              		.loc 1 279 27 is_stmt 0 view .LVU211
 865 00ca 084B     		ldr	r3, .L73+16
 866 00cc 1B68     		ldr	r3, [r3]
 867 00ce C01A     		subs	r0, r0, r3
 279:Core/Src/main.c ****         state_button1_t = RESET_BTN;
 868              		.loc 1 279 20 view .LVU212
 869 00d0 0B4B     		ldr	r3, .L73+36
 870 00d2 1860     		str	r0, [r3]
 280:Core/Src/main.c ****       }
 871              		.loc 1 280 9 is_stmt 1 view .LVU213
 280:Core/Src/main.c ****       }
 872              		.loc 1 280 25 is_stmt 0 view .LVU214
 873 00d4 034B     		ldr	r3, .L73+8
 874 00d6 0022     		movs	r2, #0
 875 00d8 1A70     		strb	r2, [r3]
 286:Core/Src/main.c **** 
 876              		.loc 1 286 1 view .LVU215
 877 00da A7E7     		b	.L56
 878              	.L74:
 879              		.align	2
 880              	.L73:
 881 00dc 000C0140 		.word	1073810432
 882 00e0 00000000 		.word	state_button1
ARM GAS  /tmp/ccGpNQj9.s 			page 31


 883 00e4 00000000 		.word	state_button1_t
 884 00e8 00000000 		.word	pre_state_button1_t
 885 00ec 00000000 		.word	t_0_s1
 886 00f0 00000000 		.word	t_s1
 887 00f4 00000000 		.word	t_diff_s1
 888 00f8 00000000 		.word	bounce_delay_s
 889 00fc 00000000 		.word	hold_delay_s
 890 0100 00000000 		.word	t_press_s1
 891              		.cfi_endproc
 892              	.LFE75:
 894              		.section	.text.SM_button2,"ax",%progbits
 895              		.align	1
 896              		.global	SM_button2
 897              		.syntax unified
 898              		.thumb
 899              		.thumb_func
 901              	SM_button2:
 902              	.LFB76:
 288:Core/Src/main.c ****   state_button2 = HAL_GPIO_ReadPin(button2_GPIO_Port, button2_Pin);
 903              		.loc 1 288 22 is_stmt 1 view -0
 904              		.cfi_startproc
 905              		@ args = 0, pretend = 0, frame = 0
 906              		@ frame_needed = 0, uses_anonymous_args = 0
 907 0000 08B5     		push	{r3, lr}
 908              		.cfi_def_cfa_offset 8
 909              		.cfi_offset 3, -8
 910              		.cfi_offset 14, -4
 289:Core/Src/main.c ****   pre_state_button2_t = state_button2_t;
 911              		.loc 1 289 3 view .LVU217
 289:Core/Src/main.c ****   pre_state_button2_t = state_button2_t;
 912              		.loc 1 289 19 is_stmt 0 view .LVU218
 913 0002 0221     		movs	r1, #2
 914 0004 3548     		ldr	r0, .L92
 915 0006 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 916              	.LVL37:
 289:Core/Src/main.c ****   pre_state_button2_t = state_button2_t;
 917              		.loc 1 289 17 view .LVU219
 918 000a 354B     		ldr	r3, .L92+4
 919 000c 1870     		strb	r0, [r3]
 290:Core/Src/main.c ****   switch(state_button2_t){
 920              		.loc 1 290 3 is_stmt 1 view .LVU220
 290:Core/Src/main.c ****   switch(state_button2_t){
 921              		.loc 1 290 23 is_stmt 0 view .LVU221
 922 000e 354B     		ldr	r3, .L92+8
 923 0010 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 924 0012 354A     		ldr	r2, .L92+12
 925 0014 1370     		strb	r3, [r2]
 291:Core/Src/main.c ****     case RESET_BTN:
 926              		.loc 1 291 3 is_stmt 1 view .LVU222
 927 0016 072B     		cmp	r3, #7
 928 0018 08D8     		bhi	.L75
 929 001a DFE803F0 		tbb	[pc, r3]
 930              	.L78:
 931 001e 04       		.byte	(.L85-.L78)/2
 932 001f 08       		.byte	(.L84-.L78)/2
 933 0020 0E       		.byte	(.L83-.L78)/2
 934 0021 16       		.byte	(.L82-.L78)/2
ARM GAS  /tmp/ccGpNQj9.s 			page 32


 935 0022 2F       		.byte	(.L81-.L78)/2
 936 0023 48       		.byte	(.L80-.L78)/2
 937 0024 4C       		.byte	(.L79-.L78)/2
 938 0025 50       		.byte	(.L77-.L78)/2
 939              		.p2align 1
 940              	.L85:
 293:Core/Src/main.c ****       break;
 941              		.loc 1 293 7 view .LVU223
 293:Core/Src/main.c ****       break;
 942              		.loc 1 293 23 is_stmt 0 view .LVU224
 943 0026 2F4B     		ldr	r3, .L92+8
 944 0028 0122     		movs	r2, #1
 945 002a 1A70     		strb	r2, [r3]
 294:Core/Src/main.c ****     case WAIT:
 946              		.loc 1 294 7 is_stmt 1 view .LVU225
 947              	.L75:
 340:Core/Src/main.c **** 
 948              		.loc 1 340 1 is_stmt 0 view .LVU226
 949 002c 08BD     		pop	{r3, pc}
 950              	.L84:
 296:Core/Src/main.c ****         state_button2_t = ARMING;
 951              		.loc 1 296 7 is_stmt 1 view .LVU227
 296:Core/Src/main.c ****         state_button2_t = ARMING;
 952              		.loc 1 296 10 is_stmt 0 view .LVU228
 953 002e 0028     		cmp	r0, #0
 954 0030 FCD1     		bne	.L75
 297:Core/Src/main.c ****       }
 955              		.loc 1 297 9 is_stmt 1 view .LVU229
 297:Core/Src/main.c ****       }
 956              		.loc 1 297 25 is_stmt 0 view .LVU230
 957 0032 2C4B     		ldr	r3, .L92+8
 958 0034 0222     		movs	r2, #2
 959 0036 1A70     		strb	r2, [r3]
 960 0038 F8E7     		b	.L75
 961              	.L83:
 301:Core/Src/main.c ****       state_button2_t = ARMED;
 962              		.loc 1 301 7 is_stmt 1 view .LVU231
 301:Core/Src/main.c ****       state_button2_t = ARMED;
 963              		.loc 1 301 16 is_stmt 0 view .LVU232
 964 003a FFF7FEFF 		bl	HAL_GetTick
 965              	.LVL38:
 301:Core/Src/main.c ****       state_button2_t = ARMED;
 966              		.loc 1 301 14 view .LVU233
 967 003e 2B4B     		ldr	r3, .L92+16
 968 0040 1860     		str	r0, [r3]
 302:Core/Src/main.c ****       break;
 969              		.loc 1 302 7 is_stmt 1 view .LVU234
 302:Core/Src/main.c ****       break;
 970              		.loc 1 302 23 is_stmt 0 view .LVU235
 971 0042 284B     		ldr	r3, .L92+8
 972 0044 0322     		movs	r2, #3
 973 0046 1A70     		strb	r2, [r3]
 303:Core/Src/main.c ****     case ARMED:
 974              		.loc 1 303 7 is_stmt 1 view .LVU236
 975 0048 F0E7     		b	.L75
 976              	.L82:
 305:Core/Src/main.c ****       t_diff_s2 = t_s2 - t_0_s2;
ARM GAS  /tmp/ccGpNQj9.s 			page 33


 977              		.loc 1 305 7 view .LVU237
 305:Core/Src/main.c ****       t_diff_s2 = t_s2 - t_0_s2;
 978              		.loc 1 305 14 is_stmt 0 view .LVU238
 979 004a FFF7FEFF 		bl	HAL_GetTick
 980              	.LVL39:
 305:Core/Src/main.c ****       t_diff_s2 = t_s2 - t_0_s2;
 981              		.loc 1 305 12 view .LVU239
 982 004e 284B     		ldr	r3, .L92+20
 983 0050 1860     		str	r0, [r3]
 306:Core/Src/main.c ****       if (state_button2 == GPIO_PIN_SET){
 984              		.loc 1 306 7 is_stmt 1 view .LVU240
 306:Core/Src/main.c ****       if (state_button2 == GPIO_PIN_SET){
 985              		.loc 1 306 24 is_stmt 0 view .LVU241
 986 0052 264B     		ldr	r3, .L92+16
 987 0054 1B68     		ldr	r3, [r3]
 988 0056 C01A     		subs	r0, r0, r3
 306:Core/Src/main.c ****       if (state_button2 == GPIO_PIN_SET){
 989              		.loc 1 306 17 view .LVU242
 990 0058 264B     		ldr	r3, .L92+24
 991 005a 1860     		str	r0, [r3]
 307:Core/Src/main.c ****         state_button2_t = RESET_BTN;
 992              		.loc 1 307 7 is_stmt 1 view .LVU243
 307:Core/Src/main.c ****         state_button2_t = RESET_BTN;
 993              		.loc 1 307 25 is_stmt 0 view .LVU244
 994 005c 204B     		ldr	r3, .L92+4
 995 005e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 307:Core/Src/main.c ****         state_button2_t = RESET_BTN;
 996              		.loc 1 307 10 view .LVU245
 997 0060 012B     		cmp	r3, #1
 998 0062 07D0     		beq	.L90
 999              	.L86:
 310:Core/Src/main.c ****         state_button2_t = DRAWN;
 1000              		.loc 1 310 7 is_stmt 1 view .LVU246
 310:Core/Src/main.c ****         state_button2_t = DRAWN;
 1001              		.loc 1 310 20 is_stmt 0 view .LVU247
 1002 0064 244B     		ldr	r3, .L92+28
 1003 0066 1B68     		ldr	r3, [r3]
 310:Core/Src/main.c ****         state_button2_t = DRAWN;
 1004              		.loc 1 310 9 view .LVU248
 1005 0068 9842     		cmp	r0, r3
 1006 006a DFD9     		bls	.L75
 311:Core/Src/main.c ****       }
 1007              		.loc 1 311 9 is_stmt 1 view .LVU249
 311:Core/Src/main.c ****       }
 1008              		.loc 1 311 25 is_stmt 0 view .LVU250
 1009 006c 1D4B     		ldr	r3, .L92+8
 1010 006e 0422     		movs	r2, #4
 1011 0070 1A70     		strb	r2, [r3]
 1012 0072 DBE7     		b	.L75
 1013              	.L90:
 308:Core/Src/main.c ****       }
 1014              		.loc 1 308 9 is_stmt 1 view .LVU251
 308:Core/Src/main.c ****       }
 1015              		.loc 1 308 25 is_stmt 0 view .LVU252
 1016 0074 1B4B     		ldr	r3, .L92+8
 1017 0076 0022     		movs	r2, #0
 1018 0078 1A70     		strb	r2, [r3]
ARM GAS  /tmp/ccGpNQj9.s 			page 34


 1019 007a F3E7     		b	.L86
 1020              	.L81:
 315:Core/Src/main.c ****       t_diff_s2 = t_s2 - t_0_s2;
 1021              		.loc 1 315 7 is_stmt 1 view .LVU253
 315:Core/Src/main.c ****       t_diff_s2 = t_s2 - t_0_s2;
 1022              		.loc 1 315 14 is_stmt 0 view .LVU254
 1023 007c FFF7FEFF 		bl	HAL_GetTick
 1024              	.LVL40:
 315:Core/Src/main.c ****       t_diff_s2 = t_s2 - t_0_s2;
 1025              		.loc 1 315 12 view .LVU255
 1026 0080 1B4B     		ldr	r3, .L92+20
 1027 0082 1860     		str	r0, [r3]
 316:Core/Src/main.c ****       if (state_button2 == GPIO_PIN_SET){
 1028              		.loc 1 316 7 is_stmt 1 view .LVU256
 316:Core/Src/main.c ****       if (state_button2 == GPIO_PIN_SET){
 1029              		.loc 1 316 24 is_stmt 0 view .LVU257
 1030 0084 194B     		ldr	r3, .L92+16
 1031 0086 1B68     		ldr	r3, [r3]
 1032 0088 C01A     		subs	r0, r0, r3
 316:Core/Src/main.c ****       if (state_button2 == GPIO_PIN_SET){
 1033              		.loc 1 316 17 view .LVU258
 1034 008a 1A4B     		ldr	r3, .L92+24
 1035 008c 1860     		str	r0, [r3]
 317:Core/Src/main.c ****         state_button2_t = TRIGGER;
 1036              		.loc 1 317 7 is_stmt 1 view .LVU259
 317:Core/Src/main.c ****         state_button2_t = TRIGGER;
 1037              		.loc 1 317 25 is_stmt 0 view .LVU260
 1038 008e 144B     		ldr	r3, .L92+4
 1039 0090 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 317:Core/Src/main.c ****         state_button2_t = TRIGGER;
 1040              		.loc 1 317 10 view .LVU261
 1041 0092 012B     		cmp	r3, #1
 1042 0094 07D0     		beq	.L91
 1043              	.L87:
 320:Core/Src/main.c ****         state_button2_t = HOLD;
 1044              		.loc 1 320 7 is_stmt 1 view .LVU262
 320:Core/Src/main.c ****         state_button2_t = HOLD;
 1045              		.loc 1 320 21 is_stmt 0 view .LVU263
 1046 0096 194B     		ldr	r3, .L92+32
 1047 0098 1B68     		ldr	r3, [r3]
 320:Core/Src/main.c ****         state_button2_t = HOLD;
 1048              		.loc 1 320 10 view .LVU264
 1049 009a 9842     		cmp	r0, r3
 1050 009c C6D9     		bls	.L75
 321:Core/Src/main.c ****       }
 1051              		.loc 1 321 9 is_stmt 1 view .LVU265
 321:Core/Src/main.c ****       }
 1052              		.loc 1 321 25 is_stmt 0 view .LVU266
 1053 009e 114B     		ldr	r3, .L92+8
 1054 00a0 0622     		movs	r2, #6
 1055 00a2 1A70     		strb	r2, [r3]
 1056 00a4 C2E7     		b	.L75
 1057              	.L91:
 318:Core/Src/main.c ****       }
 1058              		.loc 1 318 9 is_stmt 1 view .LVU267
 318:Core/Src/main.c ****       }
 1059              		.loc 1 318 25 is_stmt 0 view .LVU268
ARM GAS  /tmp/ccGpNQj9.s 			page 35


 1060 00a6 0F4B     		ldr	r3, .L92+8
 1061 00a8 0522     		movs	r2, #5
 1062 00aa 1A70     		strb	r2, [r3]
 1063 00ac F3E7     		b	.L87
 1064              	.L80:
 325:Core/Src/main.c ****       break;
 1065              		.loc 1 325 7 is_stmt 1 view .LVU269
 325:Core/Src/main.c ****       break;
 1066              		.loc 1 325 23 is_stmt 0 view .LVU270
 1067 00ae 0D4B     		ldr	r3, .L92+8
 1068 00b0 0022     		movs	r2, #0
 1069 00b2 1A70     		strb	r2, [r3]
 326:Core/Src/main.c ****     case HOLD:
 1070              		.loc 1 326 7 is_stmt 1 view .LVU271
 1071 00b4 BAE7     		b	.L75
 1072              	.L79:
 328:Core/Src/main.c ****       break;
 1073              		.loc 1 328 7 view .LVU272
 328:Core/Src/main.c ****       break;
 1074              		.loc 1 328 23 is_stmt 0 view .LVU273
 1075 00b6 0B4B     		ldr	r3, .L92+8
 1076 00b8 0722     		movs	r2, #7
 1077 00ba 1A70     		strb	r2, [r3]
 329:Core/Src/main.c ****     case LOW_WAIT:
 1078              		.loc 1 329 7 is_stmt 1 view .LVU274
 1079 00bc B6E7     		b	.L75
 1080              	.L77:
 331:Core/Src/main.c ****         t_s2 = HAL_GetTick();
 1081              		.loc 1 331 7 view .LVU275
 331:Core/Src/main.c ****         t_s2 = HAL_GetTick();
 1082              		.loc 1 331 10 is_stmt 0 view .LVU276
 1083 00be 0128     		cmp	r0, #1
 1084 00c0 B4D1     		bne	.L75
 332:Core/Src/main.c ****         t_press_s2 = t_s2 - t_0_s2;
 1085              		.loc 1 332 9 is_stmt 1 view .LVU277
 332:Core/Src/main.c ****         t_press_s2 = t_s2 - t_0_s2;
 1086              		.loc 1 332 16 is_stmt 0 view .LVU278
 1087 00c2 FFF7FEFF 		bl	HAL_GetTick
 1088              	.LVL41:
 332:Core/Src/main.c ****         t_press_s2 = t_s2 - t_0_s2;
 1089              		.loc 1 332 14 view .LVU279
 1090 00c6 0A4B     		ldr	r3, .L92+20
 1091 00c8 1860     		str	r0, [r3]
 333:Core/Src/main.c ****         state_button2_t = RESET_BTN;
 1092              		.loc 1 333 9 is_stmt 1 view .LVU280
 333:Core/Src/main.c ****         state_button2_t = RESET_BTN;
 1093              		.loc 1 333 27 is_stmt 0 view .LVU281
 1094 00ca 084B     		ldr	r3, .L92+16
 1095 00cc 1B68     		ldr	r3, [r3]
 1096 00ce C01A     		subs	r0, r0, r3
 333:Core/Src/main.c ****         state_button2_t = RESET_BTN;
 1097              		.loc 1 333 20 view .LVU282
 1098 00d0 0B4B     		ldr	r3, .L92+36
 1099 00d2 1860     		str	r0, [r3]
 334:Core/Src/main.c ****       }
 1100              		.loc 1 334 9 is_stmt 1 view .LVU283
 334:Core/Src/main.c ****       }
ARM GAS  /tmp/ccGpNQj9.s 			page 36


 1101              		.loc 1 334 25 is_stmt 0 view .LVU284
 1102 00d4 034B     		ldr	r3, .L92+8
 1103 00d6 0022     		movs	r2, #0
 1104 00d8 1A70     		strb	r2, [r3]
 340:Core/Src/main.c **** 
 1105              		.loc 1 340 1 view .LVU285
 1106 00da A7E7     		b	.L75
 1107              	.L93:
 1108              		.align	2
 1109              	.L92:
 1110 00dc 000C0140 		.word	1073810432
 1111 00e0 00000000 		.word	state_button2
 1112 00e4 00000000 		.word	state_button2_t
 1113 00e8 00000000 		.word	pre_state_button2_t
 1114 00ec 00000000 		.word	t_0_s2
 1115 00f0 00000000 		.word	t_s2
 1116 00f4 00000000 		.word	t_diff_s2
 1117 00f8 00000000 		.word	bounce_delay_s
 1118 00fc 00000000 		.word	hold_delay_s
 1119 0100 00000000 		.word	t_press_s2
 1120              		.cfi_endproc
 1121              	.LFE76:
 1123              		.section	.text.print_uart,"ax",%progbits
 1124              		.align	1
 1125              		.global	print_uart
 1126              		.syntax unified
 1127              		.thumb
 1128              		.thumb_func
 1130              	print_uart:
 1131              	.LVL42:
 1132              	.LFB77:
 342:Core/Src/main.c ****   HAL_UART_Transmit(&huart1, (uint8_t*)message, strlen(message), 100);
 1133              		.loc 1 342 31 is_stmt 1 view -0
 1134              		.cfi_startproc
 1135              		@ args = 0, pretend = 0, frame = 0
 1136              		@ frame_needed = 0, uses_anonymous_args = 0
 342:Core/Src/main.c ****   HAL_UART_Transmit(&huart1, (uint8_t*)message, strlen(message), 100);
 1137              		.loc 1 342 31 is_stmt 0 view .LVU287
 1138 0000 10B5     		push	{r4, lr}
 1139              		.cfi_def_cfa_offset 8
 1140              		.cfi_offset 4, -8
 1141              		.cfi_offset 14, -4
 1142 0002 0446     		mov	r4, r0
 343:Core/Src/main.c **** }
 1143              		.loc 1 343 3 is_stmt 1 view .LVU288
 343:Core/Src/main.c **** }
 1144              		.loc 1 343 49 is_stmt 0 view .LVU289
 1145 0004 FFF7FEFF 		bl	strlen
 1146              	.LVL43:
 343:Core/Src/main.c **** }
 1147              		.loc 1 343 3 view .LVU290
 1148 0008 6423     		movs	r3, #100
 1149 000a 82B2     		uxth	r2, r0
 1150 000c 2146     		mov	r1, r4
 1151 000e 0248     		ldr	r0, .L96
 1152 0010 FFF7FEFF 		bl	HAL_UART_Transmit
 1153              	.LVL44:
ARM GAS  /tmp/ccGpNQj9.s 			page 37


 344:Core/Src/main.c **** 
 1154              		.loc 1 344 1 view .LVU291
 1155 0014 10BD     		pop	{r4, pc}
 1156              	.LVL45:
 1157              	.L97:
 344:Core/Src/main.c **** 
 1158              		.loc 1 344 1 view .LVU292
 1159 0016 00BF     		.align	2
 1160              	.L96:
 1161 0018 00000000 		.word	huart1
 1162              		.cfi_endproc
 1163              	.LFE77:
 1165              		.section	.rodata.button2_pressed.str1.4,"aMS",%progbits,1
 1166              		.align	2
 1167              	.LC0:
 1168 0000 42555454 		.ascii	"BUTTON2_TRIGGERED!\015\012\000"
 1168      4F4E325F 
 1168      54524947 
 1168      47455245 
 1168      44210D0A 
 1169              		.section	.text.button2_pressed,"ax",%progbits
 1170              		.align	1
 1171              		.global	button2_pressed
 1172              		.syntax unified
 1173              		.thumb
 1174              		.thumb_func
 1176              	button2_pressed:
 1177              	.LFB80:
 400:Core/Src/main.c ****   changemodeled();
 1178              		.loc 1 400 27 is_stmt 1 view -0
 1179              		.cfi_startproc
 1180              		@ args = 0, pretend = 0, frame = 0
 1181              		@ frame_needed = 0, uses_anonymous_args = 0
 1182 0000 08B5     		push	{r3, lr}
 1183              		.cfi_def_cfa_offset 8
 1184              		.cfi_offset 3, -8
 1185              		.cfi_offset 14, -4
 401:Core/Src/main.c ****   print_uart("BUTTON2_TRIGGERED!\r\n");
 1186              		.loc 1 401 3 view .LVU294
 1187 0002 FFF7FEFF 		bl	changemodeled
 1188              	.LVL46:
 402:Core/Src/main.c **** }
 1189              		.loc 1 402 3 view .LVU295
 1190 0006 0248     		ldr	r0, .L100
 1191 0008 FFF7FEFF 		bl	print_uart
 1192              	.LVL47:
 403:Core/Src/main.c **** 
 1193              		.loc 1 403 1 is_stmt 0 view .LVU296
 1194 000c 08BD     		pop	{r3, pc}
 1195              	.L101:
 1196 000e 00BF     		.align	2
 1197              	.L100:
 1198 0010 00000000 		.word	.LC0
 1199              		.cfi_endproc
 1200              	.LFE80:
 1202              		.section	.rodata.Error_Handler.str1.4,"aMS",%progbits,1
 1203              		.align	2
ARM GAS  /tmp/ccGpNQj9.s 			page 38


 1204              	.LC1:
 1205 0000 4552524F 		.ascii	"ERROR!\015\012\000"
 1205      52210D0A 
 1205      00
 1206              		.section	.text.Error_Handler,"ax",%progbits
 1207              		.align	1
 1208              		.global	Error_Handler
 1209              		.syntax unified
 1210              		.thumb
 1211              		.thumb_func
 1213              	Error_Handler:
 1214              	.LFB87:
 685:Core/Src/main.c **** 
 686:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 687:Core/Src/main.c **** 
 688:Core/Src/main.c **** /* USER CODE END 4 */
 689:Core/Src/main.c **** 
 690:Core/Src/main.c **** /**
 691:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
 692:Core/Src/main.c ****   * @retval None
 693:Core/Src/main.c ****   */
 694:Core/Src/main.c **** void Error_Handler(void)
 695:Core/Src/main.c **** {
 1215              		.loc 1 695 1 is_stmt 1 view -0
 1216              		.cfi_startproc
 1217              		@ Volatile: function does not return.
 1218              		@ args = 0, pretend = 0, frame = 0
 1219              		@ frame_needed = 0, uses_anonymous_args = 0
 1220 0000 08B5     		push	{r3, lr}
 1221              		.cfi_def_cfa_offset 8
 1222              		.cfi_offset 3, -8
 1223              		.cfi_offset 14, -4
 696:Core/Src/main.c ****   /* USER CODE BEGIN Error_Handler_Debug */
 697:Core/Src/main.c ****   /* User can add his own implementation to report the HAL error return state */
 698:Core/Src/main.c ****   __disable_irq();
 1224              		.loc 1 698 3 view .LVU298
 1225              	.LBB8:
 1226              	.LBI8:
 1227              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.0.4
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     09. April 2018
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
ARM GAS  /tmp/ccGpNQj9.s 			page 39


  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
ARM GAS  /tmp/ccGpNQj9.s 			page 40


  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 117:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 122:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 130:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 131:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** }
ARM GAS  /tmp/ccGpNQj9.s 			page 41


 133:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 1228              		.loc 2 140 27 view .LVU299
 1229              	.LBB9:
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 1230              		.loc 2 142 3 view .LVU300
 1231              		.syntax unified
 1232              	@ 142 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1233 0002 72B6     		cpsid i
 1234              	@ 0 "" 2
 1235              		.thumb
 1236              		.syntax unified
 1237              	.L103:
 1238              	.LBE9:
 1239              	.LBE8:
 699:Core/Src/main.c ****   while (1)
 1240              		.loc 1 699 3 discriminator 1 view .LVU301
 700:Core/Src/main.c ****   { 
 701:Core/Src/main.c ****     print_uart("ERROR!\r\n");
 1241              		.loc 1 701 5 discriminator 1 view .LVU302
 1242 0004 0148     		ldr	r0, .L105
 1243 0006 FFF7FEFF 		bl	print_uart
 1244              	.LVL48:
 699:Core/Src/main.c ****   while (1)
 1245              		.loc 1 699 9 discriminator 1 view .LVU303
 1246 000a FBE7     		b	.L103
 1247              	.L106:
 1248              		.align	2
 1249              	.L105:
 1250 000c 00000000 		.word	.LC1
 1251              		.cfi_endproc
 1252              	.LFE87:
 1254              		.section	.text.MX_TIM3_Init,"ax",%progbits
 1255              		.align	1
 1256              		.syntax unified
 1257              		.thumb
 1258              		.thumb_func
 1260              	MX_TIM3_Init:
 1261              	.LFB84:
 566:Core/Src/main.c **** 
 1262              		.loc 1 566 1 view -0
 1263              		.cfi_startproc
 1264              		@ args = 0, pretend = 0, frame = 24
 1265              		@ frame_needed = 0, uses_anonymous_args = 0
 1266 0000 00B5     		push	{lr}
 1267              		.cfi_def_cfa_offset 4
 1268              		.cfi_offset 14, -4
 1269 0002 87B0     		sub	sp, sp, #28
 1270              		.cfi_def_cfa_offset 32
 572:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
ARM GAS  /tmp/ccGpNQj9.s 			page 42


 1271              		.loc 1 572 3 view .LVU305
 572:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 1272              		.loc 1 572 26 is_stmt 0 view .LVU306
 1273 0004 0023     		movs	r3, #0
 1274 0006 0293     		str	r3, [sp, #8]
 1275 0008 0393     		str	r3, [sp, #12]
 1276 000a 0493     		str	r3, [sp, #16]
 1277 000c 0593     		str	r3, [sp, #20]
 573:Core/Src/main.c **** 
 1278              		.loc 1 573 3 is_stmt 1 view .LVU307
 573:Core/Src/main.c **** 
 1279              		.loc 1 573 27 is_stmt 0 view .LVU308
 1280 000e 0093     		str	r3, [sp]
 1281 0010 0193     		str	r3, [sp, #4]
 576:Core/Src/main.c ****   htim3.Init.Period = tim3period;
 1282              		.loc 1 576 3 is_stmt 1 view .LVU309
 576:Core/Src/main.c ****   htim3.Init.Period = tim3period;
 1283              		.loc 1 576 24 is_stmt 0 view .LVU310
 1284 0012 1448     		ldr	r0, .L115
 1285 0014 144A     		ldr	r2, .L115+4
 1286 0016 1268     		ldr	r2, [r2]
 1287 0018 4260     		str	r2, [r0, #4]
 577:Core/Src/main.c ****   /* USER CODE END TIM3_Init 1 */
 1288              		.loc 1 577 3 is_stmt 1 view .LVU311
 577:Core/Src/main.c ****   /* USER CODE END TIM3_Init 1 */
 1289              		.loc 1 577 21 is_stmt 0 view .LVU312
 1290 001a 144A     		ldr	r2, .L115+8
 1291 001c 1268     		ldr	r2, [r2]
 1292 001e C260     		str	r2, [r0, #12]
 579:Core/Src/main.c ****   
 1293              		.loc 1 579 3 is_stmt 1 view .LVU313
 579:Core/Src/main.c ****   
 1294              		.loc 1 579 18 is_stmt 0 view .LVU314
 1295 0020 134A     		ldr	r2, .L115+12
 1296 0022 0260     		str	r2, [r0]
 581:Core/Src/main.c ****   
 1297              		.loc 1 581 3 is_stmt 1 view .LVU315
 581:Core/Src/main.c ****   
 1298              		.loc 1 581 26 is_stmt 0 view .LVU316
 1299 0024 8360     		str	r3, [r0, #8]
 583:Core/Src/main.c ****   htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 1300              		.loc 1 583 3 is_stmt 1 view .LVU317
 583:Core/Src/main.c ****   htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 1301              		.loc 1 583 28 is_stmt 0 view .LVU318
 1302 0026 0361     		str	r3, [r0, #16]
 584:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 1303              		.loc 1 584 3 is_stmt 1 view .LVU319
 584:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 1304              		.loc 1 584 32 is_stmt 0 view .LVU320
 1305 0028 8023     		movs	r3, #128
 1306 002a 8361     		str	r3, [r0, #24]
 585:Core/Src/main.c ****   {
 1307              		.loc 1 585 3 is_stmt 1 view .LVU321
 585:Core/Src/main.c ****   {
 1308              		.loc 1 585 7 is_stmt 0 view .LVU322
 1309 002c FFF7FEFF 		bl	HAL_TIM_Base_Init
 1310              	.LVL49:
ARM GAS  /tmp/ccGpNQj9.s 			page 43


 585:Core/Src/main.c ****   {
 1311              		.loc 1 585 6 view .LVU323
 1312 0030 90B9     		cbnz	r0, .L112
 589:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 1313              		.loc 1 589 3 is_stmt 1 view .LVU324
 589:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 1314              		.loc 1 589 34 is_stmt 0 view .LVU325
 1315 0032 4FF48053 		mov	r3, #4096
 1316 0036 0293     		str	r3, [sp, #8]
 590:Core/Src/main.c ****   {
 1317              		.loc 1 590 3 is_stmt 1 view .LVU326
 590:Core/Src/main.c ****   {
 1318              		.loc 1 590 7 is_stmt 0 view .LVU327
 1319 0038 02A9     		add	r1, sp, #8
 1320 003a 0A48     		ldr	r0, .L115
 1321 003c FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 1322              	.LVL50:
 590:Core/Src/main.c ****   {
 1323              		.loc 1 590 6 view .LVU328
 1324 0040 60B9     		cbnz	r0, .L113
 594:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 1325              		.loc 1 594 3 is_stmt 1 view .LVU329
 594:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 1326              		.loc 1 594 37 is_stmt 0 view .LVU330
 1327 0042 0023     		movs	r3, #0
 1328 0044 0093     		str	r3, [sp]
 595:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 1329              		.loc 1 595 3 is_stmt 1 view .LVU331
 595:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 1330              		.loc 1 595 33 is_stmt 0 view .LVU332
 1331 0046 0193     		str	r3, [sp, #4]
 596:Core/Src/main.c ****   {
 1332              		.loc 1 596 3 is_stmt 1 view .LVU333
 596:Core/Src/main.c ****   {
 1333              		.loc 1 596 7 is_stmt 0 view .LVU334
 1334 0048 6946     		mov	r1, sp
 1335 004a 0648     		ldr	r0, .L115
 1336 004c FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 1337              	.LVL51:
 596:Core/Src/main.c ****   {
 1338              		.loc 1 596 6 view .LVU335
 1339 0050 30B9     		cbnz	r0, .L114
 604:Core/Src/main.c **** 
 1340              		.loc 1 604 1 view .LVU336
 1341 0052 07B0     		add	sp, sp, #28
 1342              		.cfi_remember_state
 1343              		.cfi_def_cfa_offset 4
 1344              		@ sp needed
 1345 0054 5DF804FB 		ldr	pc, [sp], #4
 1346              	.L112:
 1347              		.cfi_restore_state
 587:Core/Src/main.c ****   }
 1348              		.loc 1 587 5 is_stmt 1 view .LVU337
 1349 0058 FFF7FEFF 		bl	Error_Handler
 1350              	.LVL52:
 1351              	.L113:
 592:Core/Src/main.c ****   }
ARM GAS  /tmp/ccGpNQj9.s 			page 44


 1352              		.loc 1 592 5 view .LVU338
 1353 005c FFF7FEFF 		bl	Error_Handler
 1354              	.LVL53:
 1355              	.L114:
 598:Core/Src/main.c ****   }
 1356              		.loc 1 598 5 view .LVU339
 1357 0060 FFF7FEFF 		bl	Error_Handler
 1358              	.LVL54:
 1359              	.L116:
 1360              		.align	2
 1361              	.L115:
 1362 0064 00000000 		.word	htim3
 1363 0068 00000000 		.word	tim3scaler
 1364 006c 00000000 		.word	tim3period
 1365 0070 00040040 		.word	1073742848
 1366              		.cfi_endproc
 1367              	.LFE84:
 1369              		.section	.rodata.button1_pressed.str1.4,"aMS",%progbits,1
 1370              		.align	2
 1371              	.LC2:
 1372 0000 50657269 		.ascii	"Period of timer 3: %ld\015\012\000"
 1372      6F64206F 
 1372      66207469 
 1372      6D657220 
 1372      333A2025 
 1373 0019 000000   		.align	2
 1374              	.LC3:
 1375 001c 42555454 		.ascii	"BUTTON1_TRIGGERED!\015\012\000"
 1375      4F4E315F 
 1375      54524947 
 1375      47455245 
 1375      44210D0A 
 1376              		.section	.text.button1_pressed,"ax",%progbits
 1377              		.align	1
 1378              		.global	button1_pressed
 1379              		.syntax unified
 1380              		.thumb
 1381              		.thumb_func
 1383              	button1_pressed:
 1384              	.LFB78:
 346:Core/Src/main.c ****   if (HAL_TIM_Base_Stop_IT(&htim3) != HAL_OK)
 1385              		.loc 1 346 27 view -0
 1386              		.cfi_startproc
 1387              		@ args = 0, pretend = 0, frame = 0
 1388              		@ frame_needed = 0, uses_anonymous_args = 0
 1389 0000 10B5     		push	{r4, lr}
 1390              		.cfi_def_cfa_offset 8
 1391              		.cfi_offset 4, -8
 1392              		.cfi_offset 14, -4
 347:Core/Src/main.c ****   {
 1393              		.loc 1 347 3 view .LVU341
 347:Core/Src/main.c ****   {
 1394              		.loc 1 347 7 is_stmt 0 view .LVU342
 1395 0002 1848     		ldr	r0, .L128
 1396 0004 FFF7FEFF 		bl	HAL_TIM_Base_Stop_IT
 1397              	.LVL55:
 347:Core/Src/main.c ****   {
ARM GAS  /tmp/ccGpNQj9.s 			page 45


 1398              		.loc 1 347 6 view .LVU343
 1399 0008 08BB     		cbnz	r0, .L124
 351:Core/Src/main.c ****   {
 1400              		.loc 1 351 3 is_stmt 1 view .LVU344
 351:Core/Src/main.c ****   {
 1401              		.loc 1 351 7 is_stmt 0 view .LVU345
 1402 000a 1648     		ldr	r0, .L128
 1403 000c FFF7FEFF 		bl	HAL_TIM_Base_DeInit
 1404              	.LVL56:
 351:Core/Src/main.c ****   {
 1405              		.loc 1 351 6 view .LVU346
 1406 0010 F8B9     		cbnz	r0, .L125
 355:Core/Src/main.c ****     tim3period = 20000 - 1;
 1407              		.loc 1 355 3 is_stmt 1 view .LVU347
 355:Core/Src/main.c ****     tim3period = 20000 - 1;
 1408              		.loc 1 355 17 is_stmt 0 view .LVU348
 1409 0012 154B     		ldr	r3, .L128+4
 1410 0014 1B68     		ldr	r3, [r3]
 355:Core/Src/main.c ****     tim3period = 20000 - 1;
 1411              		.loc 1 355 5 view .LVU349
 1412 0016 40F2E732 		movw	r2, #999
 1413 001a 9342     		cmp	r3, r2
 1414 001c 1BD0     		beq	.L126
 358:Core/Src/main.c ****   }
 1415              		.loc 1 358 5 is_stmt 1 view .LVU350
 358:Core/Src/main.c ****   }
 1416              		.loc 1 358 16 is_stmt 0 view .LVU351
 1417 001e A3F57A73 		sub	r3, r3, #1000
 1418 0022 114A     		ldr	r2, .L128+4
 1419 0024 1360     		str	r3, [r2]
 1420              	.L121:
 360:Core/Src/main.c ****   if (HAL_TIM_Base_Start_IT(&htim3) != HAL_OK)
 1421              		.loc 1 360 3 is_stmt 1 view .LVU352
 1422 0026 FFF7FEFF 		bl	MX_TIM3_Init
 1423              	.LVL57:
 361:Core/Src/main.c ****   {
 1424              		.loc 1 361 3 view .LVU353
 361:Core/Src/main.c ****   {
 1425              		.loc 1 361 7 is_stmt 0 view .LVU354
 1426 002a 0E48     		ldr	r0, .L128
 1427 002c FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
 1428              	.LVL58:
 361:Core/Src/main.c ****   {
 1429              		.loc 1 361 6 view .LVU355
 1430 0030 B0B9     		cbnz	r0, .L127
 365:Core/Src/main.c ****   print_uart((char*)message);
 1431              		.loc 1 365 3 is_stmt 1 view .LVU356
 1432 0032 0E4C     		ldr	r4, .L128+8
 1433 0034 0C4B     		ldr	r3, .L128+4
 1434 0036 1A68     		ldr	r2, [r3]
 1435 0038 0D49     		ldr	r1, .L128+12
 1436 003a 2046     		mov	r0, r4
 1437 003c FFF7FEFF 		bl	sprintf
 1438              	.LVL59:
 366:Core/Src/main.c ****   print_uart("BUTTON1_TRIGGERED!\r\n");
 1439              		.loc 1 366 3 view .LVU357
 1440 0040 2046     		mov	r0, r4
ARM GAS  /tmp/ccGpNQj9.s 			page 46


 1441 0042 FFF7FEFF 		bl	print_uart
 1442              	.LVL60:
 367:Core/Src/main.c **** }
 1443              		.loc 1 367 3 view .LVU358
 1444 0046 0B48     		ldr	r0, .L128+16
 1445 0048 FFF7FEFF 		bl	print_uart
 1446              	.LVL61:
 368:Core/Src/main.c **** 
 1447              		.loc 1 368 1 is_stmt 0 view .LVU359
 1448 004c 10BD     		pop	{r4, pc}
 1449              	.L124:
 349:Core/Src/main.c ****   }
 1450              		.loc 1 349 5 is_stmt 1 view .LVU360
 1451 004e FFF7FEFF 		bl	Error_Handler
 1452              	.LVL62:
 1453              	.L125:
 353:Core/Src/main.c ****   }
 1454              		.loc 1 353 5 view .LVU361
 1455 0052 FFF7FEFF 		bl	Error_Handler
 1456              	.LVL63:
 1457              	.L126:
 356:Core/Src/main.c ****   }else{
 1458              		.loc 1 356 5 view .LVU362
 356:Core/Src/main.c ****   }else{
 1459              		.loc 1 356 16 is_stmt 0 view .LVU363
 1460 0056 044B     		ldr	r3, .L128+4
 1461 0058 44F61F62 		movw	r2, #19999
 1462 005c 1A60     		str	r2, [r3]
 1463 005e E2E7     		b	.L121
 1464              	.L127:
 363:Core/Src/main.c ****   }
 1465              		.loc 1 363 5 is_stmt 1 view .LVU364
 1466 0060 FFF7FEFF 		bl	Error_Handler
 1467              	.LVL64:
 1468              	.L129:
 1469              		.align	2
 1470              	.L128:
 1471 0064 00000000 		.word	htim3
 1472 0068 00000000 		.word	tim3period
 1473 006c 00000000 		.word	message
 1474 0070 00000000 		.word	.LC2
 1475 0074 1C000000 		.word	.LC3
 1476              		.cfi_endproc
 1477              	.LFE78:
 1479              		.section	.rodata.button1_holdtime.str1.4,"aMS",%progbits,1
 1480              		.align	2
 1481              	.LC4:
 1482 0000 54696D65 		.ascii	"Time pressing button: %ld\015\012\000"
 1482      20707265 
 1482      7373696E 
 1482      67206275 
 1482      74746F6E 
 1483              		.section	.text.button1_holdtime,"ax",%progbits
 1484              		.align	1
 1485              		.global	button1_holdtime
 1486              		.syntax unified
 1487              		.thumb
ARM GAS  /tmp/ccGpNQj9.s 			page 47


 1488              		.thumb_func
 1490              	button1_holdtime:
 1491              	.LFB79:
 370:Core/Src/main.c ****   if(ishold1 != 0){
 1492              		.loc 1 370 28 view -0
 1493              		.cfi_startproc
 1494              		@ args = 0, pretend = 0, frame = 0
 1495              		@ frame_needed = 0, uses_anonymous_args = 0
 371:Core/Src/main.c ****     uint8_t divsion_time = t_press_s1 / 200;
 1496              		.loc 1 371 3 view .LVU366
 371:Core/Src/main.c ****     uint8_t divsion_time = t_press_s1 / 200;
 1497              		.loc 1 371 14 is_stmt 0 view .LVU367
 1498 0000 264B     		ldr	r3, .L145
 1499 0002 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 371:Core/Src/main.c ****     uint8_t divsion_time = t_press_s1 / 200;
 1500              		.loc 1 371 5 view .LVU368
 1501 0004 1BB9     		cbnz	r3, .L141
 397:Core/Src/main.c **** }
 1502              		.loc 1 397 3 is_stmt 1 view .LVU369
 397:Core/Src/main.c **** }
 1503              		.loc 1 397 11 is_stmt 0 view .LVU370
 1504 0006 254B     		ldr	r3, .L145
 1505 0008 0022     		movs	r2, #0
 1506 000a 1A70     		strb	r2, [r3]
 1507 000c 7047     		bx	lr
 1508              	.L141:
 370:Core/Src/main.c ****   if(ishold1 != 0){
 1509              		.loc 1 370 28 view .LVU371
 1510 000e 10B5     		push	{r4, lr}
 1511              		.cfi_def_cfa_offset 8
 1512              		.cfi_offset 4, -8
 1513              		.cfi_offset 14, -4
 1514              	.LBB10:
 372:Core/Src/main.c ****     uint16_t decrease_time = divsion_time * 1000;
 1515              		.loc 1 372 5 is_stmt 1 view .LVU372
 372:Core/Src/main.c ****     uint16_t decrease_time = divsion_time * 1000;
 1516              		.loc 1 372 39 is_stmt 0 view .LVU373
 1517 0010 234B     		ldr	r3, .L145+4
 1518 0012 1B68     		ldr	r3, [r3]
 1519 0014 234A     		ldr	r2, .L145+8
 1520 0016 A2FB0323 		umull	r2, r3, r2, r3
 372:Core/Src/main.c ****     uint16_t decrease_time = divsion_time * 1000;
 1521              		.loc 1 372 13 view .LVU374
 1522 001a C3F38713 		ubfx	r3, r3, #6, #8
 1523              	.LVL65:
 373:Core/Src/main.c ****     if (HAL_TIM_Base_Stop_IT(&htim3) != HAL_OK)
 1524              		.loc 1 373 5 is_stmt 1 view .LVU375
 373:Core/Src/main.c ****     if (HAL_TIM_Base_Stop_IT(&htim3) != HAL_OK)
 1525              		.loc 1 373 14 is_stmt 0 view .LVU376
 1526 001e C3EB4312 		rsb	r2, r3, r3, lsl #5
 1527 0022 03EB8204 		add	r4, r3, r2, lsl #2
 1528 0026 E400     		lsls	r4, r4, #3
 1529 0028 A4B2     		uxth	r4, r4
 1530              	.LVL66:
 374:Core/Src/main.c ****     {
 1531              		.loc 1 374 5 is_stmt 1 view .LVU377
 374:Core/Src/main.c ****     {
ARM GAS  /tmp/ccGpNQj9.s 			page 48


 1532              		.loc 1 374 9 is_stmt 0 view .LVU378
 1533 002a 1F48     		ldr	r0, .L145+12
 1534 002c FFF7FEFF 		bl	HAL_TIM_Base_Stop_IT
 1535              	.LVL67:
 374:Core/Src/main.c ****     {
 1536              		.loc 1 374 8 view .LVU379
 1537 0030 40BB     		cbnz	r0, .L142
 378:Core/Src/main.c ****     {
 1538              		.loc 1 378 5 is_stmt 1 view .LVU380
 378:Core/Src/main.c ****     {
 1539              		.loc 1 378 9 is_stmt 0 view .LVU381
 1540 0032 1D48     		ldr	r0, .L145+12
 1541 0034 FFF7FEFF 		bl	HAL_TIM_Base_DeInit
 1542              	.LVL68:
 378:Core/Src/main.c ****     {
 1543              		.loc 1 378 8 view .LVU382
 1544 0038 30BB     		cbnz	r0, .L143
 382:Core/Src/main.c ****       tim3period -= decrease_time;
 1545              		.loc 1 382 5 is_stmt 1 view .LVU383
 382:Core/Src/main.c ****       tim3period -= decrease_time;
 1546              		.loc 1 382 8 is_stmt 0 view .LVU384
 1547 003a 1C4B     		ldr	r3, .L145+16
 1548 003c 1B68     		ldr	r3, [r3]
 382:Core/Src/main.c ****       tim3period -= decrease_time;
 1549              		.loc 1 382 24 view .LVU385
 1550 003e 1A1B     		subs	r2, r3, r4
 382:Core/Src/main.c ****       tim3period -= decrease_time;
 1551              		.loc 1 382 7 view .LVU386
 1552 0040 002A     		cmp	r2, #0
 1553 0042 23DD     		ble	.L134
 383:Core/Src/main.c ****     }else{
 1554              		.loc 1 383 7 is_stmt 1 view .LVU387
 383:Core/Src/main.c ****     }else{
 1555              		.loc 1 383 18 is_stmt 0 view .LVU388
 1556 0044 1346     		mov	r3, r2
 1557 0046 194A     		ldr	r2, .L145+16
 1558 0048 1360     		str	r3, [r2]
 1559              	.L135:
 387:Core/Src/main.c ****     if (HAL_TIM_Base_Start_IT(&htim3) != HAL_OK)
 1560              		.loc 1 387 5 is_stmt 1 view .LVU389
 1561 004a FFF7FEFF 		bl	MX_TIM3_Init
 1562              	.LVL69:
 388:Core/Src/main.c ****     {
 1563              		.loc 1 388 5 view .LVU390
 388:Core/Src/main.c ****     {
 1564              		.loc 1 388 9 is_stmt 0 view .LVU391
 1565 004e 1648     		ldr	r0, .L145+12
 1566 0050 FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
 1567              	.LVL70:
 388:Core/Src/main.c ****     {
 1568              		.loc 1 388 8 view .LVU392
 1569 0054 F8B9     		cbnz	r0, .L144
 392:Core/Src/main.c ****     print_uart((char*)message);
 1570              		.loc 1 392 5 is_stmt 1 view .LVU393
 1571 0056 164C     		ldr	r4, .L145+20
 1572              	.LVL71:
 392:Core/Src/main.c ****     print_uart((char*)message);
ARM GAS  /tmp/ccGpNQj9.s 			page 49


 1573              		.loc 1 392 5 is_stmt 0 view .LVU394
 1574 0058 144B     		ldr	r3, .L145+16
 1575 005a 1A68     		ldr	r2, [r3]
 1576 005c 1549     		ldr	r1, .L145+24
 1577 005e 2046     		mov	r0, r4
 1578 0060 FFF7FEFF 		bl	sprintf
 1579              	.LVL72:
 393:Core/Src/main.c ****     sprintf((char*)message, "Time pressing button: %ld\r\n", t_press_s1);
 1580              		.loc 1 393 5 is_stmt 1 view .LVU395
 1581 0064 2046     		mov	r0, r4
 1582 0066 FFF7FEFF 		bl	print_uart
 1583              	.LVL73:
 394:Core/Src/main.c ****     print_uart((char*)message);
 1584              		.loc 1 394 5 view .LVU396
 1585 006a 0D4B     		ldr	r3, .L145+4
 1586 006c 1A68     		ldr	r2, [r3]
 1587 006e 1249     		ldr	r1, .L145+28
 1588 0070 2046     		mov	r0, r4
 1589 0072 FFF7FEFF 		bl	sprintf
 1590              	.LVL74:
 395:Core/Src/main.c ****   }      
 1591              		.loc 1 395 5 view .LVU397
 1592 0076 2046     		mov	r0, r4
 1593 0078 FFF7FEFF 		bl	print_uart
 1594              	.LVL75:
 1595              	.LBE10:
 397:Core/Src/main.c **** }
 1596              		.loc 1 397 3 view .LVU398
 397:Core/Src/main.c **** }
 1597              		.loc 1 397 11 is_stmt 0 view .LVU399
 1598 007c 074B     		ldr	r3, .L145
 1599 007e 0022     		movs	r2, #0
 1600 0080 1A70     		strb	r2, [r3]
 398:Core/Src/main.c **** 
 1601              		.loc 1 398 1 view .LVU400
 1602 0082 10BD     		pop	{r4, pc}
 1603              	.LVL76:
 1604              	.L142:
 1605              	.LBB11:
 376:Core/Src/main.c ****     }
 1606              		.loc 1 376 7 is_stmt 1 view .LVU401
 1607 0084 FFF7FEFF 		bl	Error_Handler
 1608              	.LVL77:
 1609              	.L143:
 380:Core/Src/main.c ****     }
 1610              		.loc 1 380 7 view .LVU402
 1611 0088 FFF7FEFF 		bl	Error_Handler
 1612              	.LVL78:
 1613              	.L134:
 385:Core/Src/main.c ****     }
 1614              		.loc 1 385 7 view .LVU403
 385:Core/Src/main.c ****     }
 1615              		.loc 1 385 18 is_stmt 0 view .LVU404
 1616 008c 074B     		ldr	r3, .L145+16
 1617 008e 44F61F62 		movw	r2, #19999
 1618 0092 1A60     		str	r2, [r3]
 1619 0094 D9E7     		b	.L135
ARM GAS  /tmp/ccGpNQj9.s 			page 50


 1620              	.L144:
 390:Core/Src/main.c ****     }
 1621              		.loc 1 390 7 is_stmt 1 view .LVU405
 1622 0096 FFF7FEFF 		bl	Error_Handler
 1623              	.LVL79:
 1624              	.L146:
 1625 009a 00BF     		.align	2
 1626              	.L145:
 1627 009c 00000000 		.word	ishold1
 1628 00a0 00000000 		.word	t_press_s1
 1629 00a4 1F85EB51 		.word	1374389535
 1630 00a8 00000000 		.word	htim3
 1631 00ac 00000000 		.word	tim3period
 1632 00b0 00000000 		.word	message
 1633 00b4 00000000 		.word	.LC2
 1634 00b8 00000000 		.word	.LC4
 1635              	.LBE11:
 1636              		.cfi_endproc
 1637              	.LFE79:
 1639              		.section	.text.button2_holdtime,"ax",%progbits
 1640              		.align	1
 1641              		.global	button2_holdtime
 1642              		.syntax unified
 1643              		.thumb
 1644              		.thumb_func
 1646              	button2_holdtime:
 1647              	.LFB81:
 405:Core/Src/main.c ****   if(ishold2 != 0){
 1648              		.loc 1 405 28 view -0
 1649              		.cfi_startproc
 1650              		@ args = 0, pretend = 0, frame = 0
 1651              		@ frame_needed = 0, uses_anonymous_args = 0
 406:Core/Src/main.c ****     uint8_t divsion_time = t_press_s2 / 200;
 1652              		.loc 1 406 3 view .LVU407
 406:Core/Src/main.c ****     uint8_t divsion_time = t_press_s2 / 200;
 1653              		.loc 1 406 14 is_stmt 0 view .LVU408
 1654 0000 254B     		ldr	r3, .L162
 1655 0002 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 406:Core/Src/main.c ****     uint8_t divsion_time = t_press_s2 / 200;
 1656              		.loc 1 406 5 view .LVU409
 1657 0004 1BB9     		cbnz	r3, .L158
 432:Core/Src/main.c **** }
 1658              		.loc 1 432 3 is_stmt 1 view .LVU410
 432:Core/Src/main.c **** }
 1659              		.loc 1 432 11 is_stmt 0 view .LVU411
 1660 0006 244B     		ldr	r3, .L162
 1661 0008 0022     		movs	r2, #0
 1662 000a 1A70     		strb	r2, [r3]
 1663 000c 7047     		bx	lr
 1664              	.L158:
 405:Core/Src/main.c ****   if(ishold2 != 0){
 1665              		.loc 1 405 28 view .LVU412
 1666 000e 10B5     		push	{r4, lr}
 1667              		.cfi_def_cfa_offset 8
 1668              		.cfi_offset 4, -8
 1669              		.cfi_offset 14, -4
 1670              	.LBB12:
ARM GAS  /tmp/ccGpNQj9.s 			page 51


 407:Core/Src/main.c ****     uint16_t increase_time = divsion_time * 1000;
 1671              		.loc 1 407 5 is_stmt 1 view .LVU413
 407:Core/Src/main.c ****     uint16_t increase_time = divsion_time * 1000;
 1672              		.loc 1 407 39 is_stmt 0 view .LVU414
 1673 0010 224B     		ldr	r3, .L162+4
 1674 0012 1B68     		ldr	r3, [r3]
 1675 0014 224A     		ldr	r2, .L162+8
 1676 0016 A2FB0323 		umull	r2, r3, r2, r3
 407:Core/Src/main.c ****     uint16_t increase_time = divsion_time * 1000;
 1677              		.loc 1 407 13 view .LVU415
 1678 001a C3F38713 		ubfx	r3, r3, #6, #8
 1679              	.LVL80:
 408:Core/Src/main.c ****     if (HAL_TIM_Base_Stop_IT(&htim3) != HAL_OK)
 1680              		.loc 1 408 5 is_stmt 1 view .LVU416
 408:Core/Src/main.c ****     if (HAL_TIM_Base_Stop_IT(&htim3) != HAL_OK)
 1681              		.loc 1 408 14 is_stmt 0 view .LVU417
 1682 001e C3EB4312 		rsb	r2, r3, r3, lsl #5
 1683 0022 03EB8203 		add	r3, r3, r2, lsl #2
 1684              	.LVL81:
 408:Core/Src/main.c ****     if (HAL_TIM_Base_Stop_IT(&htim3) != HAL_OK)
 1685              		.loc 1 408 14 view .LVU418
 1686 0026 DB00     		lsls	r3, r3, #3
 1687 0028 9CB2     		uxth	r4, r3
 1688              	.LVL82:
 409:Core/Src/main.c ****     {
 1689              		.loc 1 409 5 is_stmt 1 view .LVU419
 409:Core/Src/main.c ****     {
 1690              		.loc 1 409 9 is_stmt 0 view .LVU420
 1691 002a 1E48     		ldr	r0, .L162+12
 1692 002c FFF7FEFF 		bl	HAL_TIM_Base_Stop_IT
 1693              	.LVL83:
 409:Core/Src/main.c ****     {
 1694              		.loc 1 409 8 view .LVU421
 1695 0030 48BB     		cbnz	r0, .L159
 413:Core/Src/main.c ****     {
 1696              		.loc 1 413 5 is_stmt 1 view .LVU422
 413:Core/Src/main.c ****     {
 1697              		.loc 1 413 9 is_stmt 0 view .LVU423
 1698 0032 1C48     		ldr	r0, .L162+12
 1699 0034 FFF7FEFF 		bl	HAL_TIM_Base_DeInit
 1700              	.LVL84:
 413:Core/Src/main.c ****     {
 1701              		.loc 1 413 8 view .LVU424
 1702 0038 38BB     		cbnz	r0, .L160
 417:Core/Src/main.c ****       tim3period = 20000 - 1;
 1703              		.loc 1 417 5 is_stmt 1 view .LVU425
 417:Core/Src/main.c ****       tim3period = 20000 - 1;
 1704              		.loc 1 417 19 is_stmt 0 view .LVU426
 1705 003a 1B4B     		ldr	r3, .L162+16
 1706 003c 1B68     		ldr	r3, [r3]
 1707 003e 2344     		add	r3, r3, r4
 417:Core/Src/main.c ****       tim3period = 20000 - 1;
 1708              		.loc 1 417 7 view .LVU427
 1709 0040 44F61F62 		movw	r2, #19999
 1710 0044 9342     		cmp	r3, r2
 1711 0046 22D9     		bls	.L151
 418:Core/Src/main.c ****     }else{
ARM GAS  /tmp/ccGpNQj9.s 			page 52


 1712              		.loc 1 418 7 is_stmt 1 view .LVU428
 418:Core/Src/main.c ****     }else{
 1713              		.loc 1 418 18 is_stmt 0 view .LVU429
 1714 0048 174B     		ldr	r3, .L162+16
 1715 004a 1A60     		str	r2, [r3]
 1716              	.L152:
 422:Core/Src/main.c ****     if (HAL_TIM_Base_Start_IT(&htim3) != HAL_OK)
 1717              		.loc 1 422 5 is_stmt 1 view .LVU430
 1718 004c FFF7FEFF 		bl	MX_TIM3_Init
 1719              	.LVL85:
 423:Core/Src/main.c ****     {
 1720              		.loc 1 423 5 view .LVU431
 423:Core/Src/main.c ****     {
 1721              		.loc 1 423 9 is_stmt 0 view .LVU432
 1722 0050 1448     		ldr	r0, .L162+12
 1723 0052 FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
 1724              	.LVL86:
 423:Core/Src/main.c ****     {
 1725              		.loc 1 423 8 view .LVU433
 1726 0056 E8B9     		cbnz	r0, .L161
 427:Core/Src/main.c ****     print_uart((char*)message);
 1727              		.loc 1 427 5 is_stmt 1 view .LVU434
 1728 0058 144C     		ldr	r4, .L162+20
 1729              	.LVL87:
 427:Core/Src/main.c ****     print_uart((char*)message);
 1730              		.loc 1 427 5 is_stmt 0 view .LVU435
 1731 005a 134B     		ldr	r3, .L162+16
 1732 005c 1A68     		ldr	r2, [r3]
 1733 005e 1449     		ldr	r1, .L162+24
 1734 0060 2046     		mov	r0, r4
 1735 0062 FFF7FEFF 		bl	sprintf
 1736              	.LVL88:
 428:Core/Src/main.c ****     sprintf((char*)message, "Time pressing button: %ld\r\n", t_press_s2);
 1737              		.loc 1 428 5 is_stmt 1 view .LVU436
 1738 0066 2046     		mov	r0, r4
 1739 0068 FFF7FEFF 		bl	print_uart
 1740              	.LVL89:
 429:Core/Src/main.c ****     print_uart((char*)message);
 1741              		.loc 1 429 5 view .LVU437
 1742 006c 0B4B     		ldr	r3, .L162+4
 1743 006e 1A68     		ldr	r2, [r3]
 1744 0070 1049     		ldr	r1, .L162+28
 1745 0072 2046     		mov	r0, r4
 1746 0074 FFF7FEFF 		bl	sprintf
 1747              	.LVL90:
 430:Core/Src/main.c ****   }      
 1748              		.loc 1 430 5 view .LVU438
 1749 0078 2046     		mov	r0, r4
 1750 007a FFF7FEFF 		bl	print_uart
 1751              	.LVL91:
 1752              	.LBE12:
 432:Core/Src/main.c **** }
 1753              		.loc 1 432 3 view .LVU439
 432:Core/Src/main.c **** }
 1754              		.loc 1 432 11 is_stmt 0 view .LVU440
 1755 007e 064B     		ldr	r3, .L162
 1756 0080 0022     		movs	r2, #0
ARM GAS  /tmp/ccGpNQj9.s 			page 53


 1757 0082 1A70     		strb	r2, [r3]
 433:Core/Src/main.c **** 
 1758              		.loc 1 433 1 view .LVU441
 1759 0084 10BD     		pop	{r4, pc}
 1760              	.LVL92:
 1761              	.L159:
 1762              	.LBB13:
 411:Core/Src/main.c ****     }
 1763              		.loc 1 411 7 is_stmt 1 view .LVU442
 1764 0086 FFF7FEFF 		bl	Error_Handler
 1765              	.LVL93:
 1766              	.L160:
 415:Core/Src/main.c ****     }
 1767              		.loc 1 415 7 view .LVU443
 1768 008a FFF7FEFF 		bl	Error_Handler
 1769              	.LVL94:
 1770              	.L151:
 420:Core/Src/main.c ****     }  
 1771              		.loc 1 420 7 view .LVU444
 420:Core/Src/main.c ****     }  
 1772              		.loc 1 420 18 is_stmt 0 view .LVU445
 1773 008e 064A     		ldr	r2, .L162+16
 1774 0090 1360     		str	r3, [r2]
 1775 0092 DBE7     		b	.L152
 1776              	.L161:
 425:Core/Src/main.c ****     }
 1777              		.loc 1 425 7 is_stmt 1 view .LVU446
 1778 0094 FFF7FEFF 		bl	Error_Handler
 1779              	.LVL95:
 1780              	.L163:
 1781              		.align	2
 1782              	.L162:
 1783 0098 00000000 		.word	ishold2
 1784 009c 00000000 		.word	t_press_s2
 1785 00a0 1F85EB51 		.word	1374389535
 1786 00a4 00000000 		.word	htim3
 1787 00a8 00000000 		.word	tim3period
 1788 00ac 00000000 		.word	message
 1789 00b0 00000000 		.word	.LC2
 1790 00b4 00000000 		.word	.LC4
 1791              	.LBE13:
 1792              		.cfi_endproc
 1793              	.LFE81:
 1795              		.section	.text.MX_USART1_UART_Init,"ax",%progbits
 1796              		.align	1
 1797              		.syntax unified
 1798              		.thumb
 1799              		.thumb_func
 1801              	MX_USART1_UART_Init:
 1802              	.LFB85:
 612:Core/Src/main.c **** 
 1803              		.loc 1 612 1 view -0
 1804              		.cfi_startproc
 1805              		@ args = 0, pretend = 0, frame = 0
 1806              		@ frame_needed = 0, uses_anonymous_args = 0
 1807 0000 08B5     		push	{r3, lr}
 1808              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccGpNQj9.s 			page 54


 1809              		.cfi_offset 3, -8
 1810              		.cfi_offset 14, -4
 621:Core/Src/main.c ****   huart1.Init.BaudRate = 115200;
 1811              		.loc 1 621 3 view .LVU448
 621:Core/Src/main.c ****   huart1.Init.BaudRate = 115200;
 1812              		.loc 1 621 19 is_stmt 0 view .LVU449
 1813 0002 0A48     		ldr	r0, .L168
 1814 0004 0A4B     		ldr	r3, .L168+4
 1815 0006 0360     		str	r3, [r0]
 622:Core/Src/main.c ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 1816              		.loc 1 622 3 is_stmt 1 view .LVU450
 622:Core/Src/main.c ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 1817              		.loc 1 622 24 is_stmt 0 view .LVU451
 1818 0008 4FF4E133 		mov	r3, #115200
 1819 000c 4360     		str	r3, [r0, #4]
 623:Core/Src/main.c ****   huart1.Init.StopBits = UART_STOPBITS_1;
 1820              		.loc 1 623 3 is_stmt 1 view .LVU452
 623:Core/Src/main.c ****   huart1.Init.StopBits = UART_STOPBITS_1;
 1821              		.loc 1 623 26 is_stmt 0 view .LVU453
 1822 000e 0023     		movs	r3, #0
 1823 0010 8360     		str	r3, [r0, #8]
 624:Core/Src/main.c ****   huart1.Init.Parity = UART_PARITY_NONE;
 1824              		.loc 1 624 3 is_stmt 1 view .LVU454
 624:Core/Src/main.c ****   huart1.Init.Parity = UART_PARITY_NONE;
 1825              		.loc 1 624 24 is_stmt 0 view .LVU455
 1826 0012 C360     		str	r3, [r0, #12]
 625:Core/Src/main.c ****   huart1.Init.Mode = UART_MODE_TX_RX;
 1827              		.loc 1 625 3 is_stmt 1 view .LVU456
 625:Core/Src/main.c ****   huart1.Init.Mode = UART_MODE_TX_RX;
 1828              		.loc 1 625 22 is_stmt 0 view .LVU457
 1829 0014 0361     		str	r3, [r0, #16]
 626:Core/Src/main.c ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 1830              		.loc 1 626 3 is_stmt 1 view .LVU458
 626:Core/Src/main.c ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 1831              		.loc 1 626 20 is_stmt 0 view .LVU459
 1832 0016 0C22     		movs	r2, #12
 1833 0018 4261     		str	r2, [r0, #20]
 627:Core/Src/main.c ****   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 1834              		.loc 1 627 3 is_stmt 1 view .LVU460
 627:Core/Src/main.c ****   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 1835              		.loc 1 627 25 is_stmt 0 view .LVU461
 1836 001a 8361     		str	r3, [r0, #24]
 628:Core/Src/main.c ****   if (HAL_UART_Init(&huart1) != HAL_OK)
 1837              		.loc 1 628 3 is_stmt 1 view .LVU462
 628:Core/Src/main.c ****   if (HAL_UART_Init(&huart1) != HAL_OK)
 1838              		.loc 1 628 28 is_stmt 0 view .LVU463
 1839 001c C361     		str	r3, [r0, #28]
 629:Core/Src/main.c ****   {
 1840              		.loc 1 629 3 is_stmt 1 view .LVU464
 629:Core/Src/main.c ****   {
 1841              		.loc 1 629 7 is_stmt 0 view .LVU465
 1842 001e FFF7FEFF 		bl	HAL_UART_Init
 1843              	.LVL96:
 629:Core/Src/main.c ****   {
 1844              		.loc 1 629 6 view .LVU466
 1845 0022 00B9     		cbnz	r0, .L167
 637:Core/Src/main.c **** 
ARM GAS  /tmp/ccGpNQj9.s 			page 55


 1846              		.loc 1 637 1 view .LVU467
 1847 0024 08BD     		pop	{r3, pc}
 1848              	.L167:
 631:Core/Src/main.c ****   }
 1849              		.loc 1 631 5 is_stmt 1 view .LVU468
 1850 0026 FFF7FEFF 		bl	Error_Handler
 1851              	.LVL97:
 1852              	.L169:
 1853 002a 00BF     		.align	2
 1854              	.L168:
 1855 002c 00000000 		.word	huart1
 1856 0030 00380140 		.word	1073821696
 1857              		.cfi_endproc
 1858              	.LFE85:
 1860              		.section	.text.SystemClock_Config,"ax",%progbits
 1861              		.align	1
 1862              		.global	SystemClock_Config
 1863              		.syntax unified
 1864              		.thumb
 1865              		.thumb_func
 1867              	SystemClock_Config:
 1868              	.LFB83:
 526:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 1869              		.loc 1 526 1 view -0
 1870              		.cfi_startproc
 1871              		@ args = 0, pretend = 0, frame = 64
 1872              		@ frame_needed = 0, uses_anonymous_args = 0
 1873 0000 00B5     		push	{lr}
 1874              		.cfi_def_cfa_offset 4
 1875              		.cfi_offset 14, -4
 1876 0002 91B0     		sub	sp, sp, #68
 1877              		.cfi_def_cfa_offset 72
 527:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 1878              		.loc 1 527 3 view .LVU470
 527:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 1879              		.loc 1 527 22 is_stmt 0 view .LVU471
 1880 0004 2822     		movs	r2, #40
 1881 0006 0021     		movs	r1, #0
 1882 0008 06A8     		add	r0, sp, #24
 1883 000a FFF7FEFF 		bl	memset
 1884              	.LVL98:
 528:Core/Src/main.c **** 
 1885              		.loc 1 528 3 is_stmt 1 view .LVU472
 528:Core/Src/main.c **** 
 1886              		.loc 1 528 22 is_stmt 0 view .LVU473
 1887 000e 0023     		movs	r3, #0
 1888 0010 0193     		str	r3, [sp, #4]
 1889 0012 0293     		str	r3, [sp, #8]
 1890 0014 0393     		str	r3, [sp, #12]
 1891 0016 0493     		str	r3, [sp, #16]
 1892 0018 0593     		str	r3, [sp, #20]
 533:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 1893              		.loc 1 533 3 is_stmt 1 view .LVU474
 533:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 1894              		.loc 1 533 36 is_stmt 0 view .LVU475
 1895 001a 0122     		movs	r2, #1
 1896 001c 0692     		str	r2, [sp, #24]
ARM GAS  /tmp/ccGpNQj9.s 			page 56


 534:Core/Src/main.c ****   RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 1897              		.loc 1 534 3 is_stmt 1 view .LVU476
 534:Core/Src/main.c ****   RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 1898              		.loc 1 534 30 is_stmt 0 view .LVU477
 1899 001e 4FF48033 		mov	r3, #65536
 1900 0022 0793     		str	r3, [sp, #28]
 535:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 1901              		.loc 1 535 3 is_stmt 1 view .LVU478
 536:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 1902              		.loc 1 536 3 view .LVU479
 536:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 1903              		.loc 1 536 30 is_stmt 0 view .LVU480
 1904 0024 0A92     		str	r2, [sp, #40]
 537:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 1905              		.loc 1 537 3 is_stmt 1 view .LVU481
 537:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 1906              		.loc 1 537 34 is_stmt 0 view .LVU482
 1907 0026 0222     		movs	r2, #2
 1908 0028 0D92     		str	r2, [sp, #52]
 538:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 1909              		.loc 1 538 3 is_stmt 1 view .LVU483
 538:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 1910              		.loc 1 538 35 is_stmt 0 view .LVU484
 1911 002a 0E93     		str	r3, [sp, #56]
 539:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 1912              		.loc 1 539 3 is_stmt 1 view .LVU485
 539:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 1913              		.loc 1 539 32 is_stmt 0 view .LVU486
 1914 002c 4FF4E013 		mov	r3, #1835008
 1915 0030 0F93     		str	r3, [sp, #60]
 540:Core/Src/main.c ****   {
 1916              		.loc 1 540 3 is_stmt 1 view .LVU487
 540:Core/Src/main.c ****   {
 1917              		.loc 1 540 7 is_stmt 0 view .LVU488
 1918 0032 06A8     		add	r0, sp, #24
 1919 0034 FFF7FEFF 		bl	HAL_RCC_OscConfig
 1920              	.LVL99:
 540:Core/Src/main.c ****   {
 1921              		.loc 1 540 6 view .LVU489
 1922 0038 80B9     		cbnz	r0, .L174
 547:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 1923              		.loc 1 547 3 is_stmt 1 view .LVU490
 547:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 1924              		.loc 1 547 31 is_stmt 0 view .LVU491
 1925 003a 0F23     		movs	r3, #15
 1926 003c 0193     		str	r3, [sp, #4]
 549:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1927              		.loc 1 549 3 is_stmt 1 view .LVU492
 549:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1928              		.loc 1 549 34 is_stmt 0 view .LVU493
 1929 003e 0221     		movs	r1, #2
 1930 0040 0291     		str	r1, [sp, #8]
 550:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 1931              		.loc 1 550 3 is_stmt 1 view .LVU494
 550:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 1932              		.loc 1 550 35 is_stmt 0 view .LVU495
 1933 0042 0023     		movs	r3, #0
ARM GAS  /tmp/ccGpNQj9.s 			page 57


 1934 0044 0393     		str	r3, [sp, #12]
 551:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 1935              		.loc 1 551 3 is_stmt 1 view .LVU496
 551:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 1936              		.loc 1 551 36 is_stmt 0 view .LVU497
 1937 0046 4FF48062 		mov	r2, #1024
 1938 004a 0492     		str	r2, [sp, #16]
 552:Core/Src/main.c **** 
 1939              		.loc 1 552 3 is_stmt 1 view .LVU498
 552:Core/Src/main.c **** 
 1940              		.loc 1 552 36 is_stmt 0 view .LVU499
 1941 004c 0593     		str	r3, [sp, #20]
 554:Core/Src/main.c ****   {
 1942              		.loc 1 554 3 is_stmt 1 view .LVU500
 554:Core/Src/main.c ****   {
 1943              		.loc 1 554 7 is_stmt 0 view .LVU501
 1944 004e 01A8     		add	r0, sp, #4
 1945 0050 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 1946              	.LVL100:
 554:Core/Src/main.c ****   {
 1947              		.loc 1 554 6 view .LVU502
 1948 0054 20B9     		cbnz	r0, .L175
 558:Core/Src/main.c **** 
 1949              		.loc 1 558 1 view .LVU503
 1950 0056 11B0     		add	sp, sp, #68
 1951              		.cfi_remember_state
 1952              		.cfi_def_cfa_offset 4
 1953              		@ sp needed
 1954 0058 5DF804FB 		ldr	pc, [sp], #4
 1955              	.L174:
 1956              		.cfi_restore_state
 542:Core/Src/main.c ****   }
 1957              		.loc 1 542 5 is_stmt 1 view .LVU504
 1958 005c FFF7FEFF 		bl	Error_Handler
 1959              	.LVL101:
 1960              	.L175:
 556:Core/Src/main.c ****   }
 1961              		.loc 1 556 5 view .LVU505
 1962 0060 FFF7FEFF 		bl	Error_Handler
 1963              	.LVL102:
 1964              		.cfi_endproc
 1965              	.LFE83:
 1967              		.section	.rodata.main.str1.4,"aMS",%progbits,1
 1968              		.align	2
 1969              	.LC5:
 1970 0000 42555454 		.ascii	"BUTTON1_HOLD!\015\012\000"
 1970      4F4E315F 
 1970      484F4C44 
 1970      210D0A00 
 1971              		.align	2
 1972              	.LC6:
 1973 0010 42555454 		.ascii	"BUTTON2_HOLD!\015\012\000"
 1973      4F4E325F 
 1973      484F4C44 
 1973      210D0A00 
 1974              		.align	2
 1975              	.LC7:
ARM GAS  /tmp/ccGpNQj9.s 			page 58


 1976 0020 53746174 		.ascii	"State Of Button1: %d\015\012\000"
 1976      65204F66 
 1976      20427574 
 1976      746F6E31 
 1976      3A202564 
 1977 0037 00       		.align	2
 1978              	.LC8:
 1979 0038 53746174 		.ascii	"State Of Button2: %d\015\012\000"
 1979      65204F66 
 1979      20427574 
 1979      746F6E32 
 1979      3A202564 
 1980              		.section	.text.main,"ax",%progbits
 1981              		.align	1
 1982              		.global	main
 1983              		.syntax unified
 1984              		.thumb
 1985              		.thumb_func
 1987              	main:
 1988              	.LFB82:
 442:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 1989              		.loc 1 442 1 view -0
 1990              		.cfi_startproc
 1991              		@ Volatile: function does not return.
 1992              		@ args = 0, pretend = 0, frame = 0
 1993              		@ frame_needed = 0, uses_anonymous_args = 0
 1994 0000 08B5     		push	{r3, lr}
 1995              		.cfi_def_cfa_offset 8
 1996              		.cfi_offset 3, -8
 1997              		.cfi_offset 14, -4
 450:Core/Src/main.c **** 
 1998              		.loc 1 450 3 view .LVU507
 1999 0002 FFF7FEFF 		bl	HAL_Init
 2000              	.LVL103:
 457:Core/Src/main.c **** 
 2001              		.loc 1 457 3 view .LVU508
 2002 0006 FFF7FEFF 		bl	SystemClock_Config
 2003              	.LVL104:
 464:Core/Src/main.c ****   MX_USART1_UART_Init();
 2004              		.loc 1 464 3 view .LVU509
 2005 000a FFF7FEFF 		bl	MX_GPIO_Init
 2006              	.LVL105:
 465:Core/Src/main.c ****   MX_TIM3_Init();
 2007              		.loc 1 465 3 view .LVU510
 2008 000e FFF7FEFF 		bl	MX_USART1_UART_Init
 2009              	.LVL106:
 466:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 2010              		.loc 1 466 3 view .LVU511
 2011 0012 FFF7FEFF 		bl	MX_TIM3_Init
 2012              	.LVL107:
 468:Core/Src/main.c ****   {
 2013              		.loc 1 468 3 view .LVU512
 468:Core/Src/main.c ****   {
 2014              		.loc 1 468 7 is_stmt 0 view .LVU513
 2015 0016 2C48     		ldr	r0, .L195
 2016 0018 FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
 2017              	.LVL108:
ARM GAS  /tmp/ccGpNQj9.s 			page 59


 468:Core/Src/main.c ****   {
 2018              		.loc 1 468 6 view .LVU514
 2019 001c 0028     		cmp	r0, #0
 2020 001e 2ED1     		bne	.L187
 2021              	.L185:
 476:Core/Src/main.c ****   {
 2022              		.loc 1 476 3 is_stmt 1 view .LVU515
 481:Core/Src/main.c ****     SM_button2();
 2023              		.loc 1 481 5 view .LVU516
 2024 0020 FFF7FEFF 		bl	SM_button1
 2025              	.LVL109:
 482:Core/Src/main.c ****     if (state_button1_t == TRIGGER){
 2026              		.loc 1 482 5 view .LVU517
 2027 0024 FFF7FEFF 		bl	SM_button2
 2028              	.LVL110:
 483:Core/Src/main.c ****       button1_pressed();
 2029              		.loc 1 483 5 view .LVU518
 483:Core/Src/main.c ****       button1_pressed();
 2030              		.loc 1 483 25 is_stmt 0 view .LVU519
 2031 0028 284B     		ldr	r3, .L195+4
 2032 002a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 483:Core/Src/main.c ****       button1_pressed();
 2033              		.loc 1 483 8 view .LVU520
 2034 002c 052B     		cmp	r3, #5
 2035 002e 28D0     		beq	.L188
 2036              	.L178:
 486:Core/Src/main.c ****       print_uart("BUTTON1_HOLD!\r\n");
 2037              		.loc 1 486 5 is_stmt 1 view .LVU521
 486:Core/Src/main.c ****       print_uart("BUTTON1_HOLD!\r\n");
 2038              		.loc 1 486 25 is_stmt 0 view .LVU522
 2039 0030 264B     		ldr	r3, .L195+4
 2040 0032 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 486:Core/Src/main.c ****       print_uart("BUTTON1_HOLD!\r\n");
 2041              		.loc 1 486 8 view .LVU523
 2042 0034 062B     		cmp	r3, #6
 2043 0036 27D0     		beq	.L189
 2044              	.L179:
 490:Core/Src/main.c ****       button1_holdtime();
 2045              		.loc 1 490 5 is_stmt 1 view .LVU524
 490:Core/Src/main.c ****       button1_holdtime();
 2046              		.loc 1 490 25 is_stmt 0 view .LVU525
 2047 0038 244B     		ldr	r3, .L195+4
 2048 003a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 490:Core/Src/main.c ****       button1_holdtime();
 2049              		.loc 1 490 8 view .LVU526
 2050 003c 5BB3     		cbz	r3, .L190
 2051              	.L180:
 494:Core/Src/main.c ****       button2_pressed();
 2052              		.loc 1 494 5 is_stmt 1 view .LVU527
 494:Core/Src/main.c ****       button2_pressed();
 2053              		.loc 1 494 25 is_stmt 0 view .LVU528
 2054 003e 244B     		ldr	r3, .L195+8
 2055 0040 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 494:Core/Src/main.c ****       button2_pressed();
 2056              		.loc 1 494 8 view .LVU529
 2057 0042 052B     		cmp	r3, #5
 2058 0044 2AD0     		beq	.L191
ARM GAS  /tmp/ccGpNQj9.s 			page 60


 2059              	.L181:
 497:Core/Src/main.c ****       print_uart("BUTTON2_HOLD!\r\n");
 2060              		.loc 1 497 5 is_stmt 1 view .LVU530
 497:Core/Src/main.c ****       print_uart("BUTTON2_HOLD!\r\n");
 2061              		.loc 1 497 25 is_stmt 0 view .LVU531
 2062 0046 224B     		ldr	r3, .L195+8
 2063 0048 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 497:Core/Src/main.c ****       print_uart("BUTTON2_HOLD!\r\n");
 2064              		.loc 1 497 8 view .LVU532
 2065 004a 062B     		cmp	r3, #6
 2066 004c 29D0     		beq	.L192
 2067              	.L182:
 501:Core/Src/main.c ****       button2_holdtime();
 2068              		.loc 1 501 5 is_stmt 1 view .LVU533
 501:Core/Src/main.c ****       button2_holdtime();
 2069              		.loc 1 501 25 is_stmt 0 view .LVU534
 2070 004e 204B     		ldr	r3, .L195+8
 2071 0050 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 501:Core/Src/main.c ****       button2_holdtime();
 2072              		.loc 1 501 8 view .LVU535
 2073 0052 6BB3     		cbz	r3, .L193
 2074              	.L183:
 505:Core/Src/main.c ****       if(pre_state_button1_t != state_button1_t){
 2075              		.loc 1 505 5 is_stmt 1 view .LVU536
 506:Core/Src/main.c ****         sprintf((char*)message, "State Of Button1: %d\r\n", state_button1_t);
 2076              		.loc 1 506 7 view .LVU537
 506:Core/Src/main.c ****         sprintf((char*)message, "State Of Button1: %d\r\n", state_button1_t);
 2077              		.loc 1 506 30 is_stmt 0 view .LVU538
 2078 0054 1F4B     		ldr	r3, .L195+12
 2079 0056 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2080 0058 1C4A     		ldr	r2, .L195+4
 2081 005a 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 506:Core/Src/main.c ****         sprintf((char*)message, "State Of Button1: %d\r\n", state_button1_t);
 2082              		.loc 1 506 9 view .LVU539
 2083 005c 9342     		cmp	r3, r2
 2084 005e 2AD1     		bne	.L194
 2085              	.L184:
 511:Core/Src/main.c ****         sprintf((char*)message, "State Of Button2: %d\r\n", state_button2_t);
 2086              		.loc 1 511 7 is_stmt 1 view .LVU540
 511:Core/Src/main.c ****         sprintf((char*)message, "State Of Button2: %d\r\n", state_button2_t);
 2087              		.loc 1 511 30 is_stmt 0 view .LVU541
 2088 0060 1D4B     		ldr	r3, .L195+16
 2089 0062 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2090 0064 1A4A     		ldr	r2, .L195+8
 2091 0066 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 511:Core/Src/main.c ****         sprintf((char*)message, "State Of Button2: %d\r\n", state_button2_t);
 2092              		.loc 1 511 9 view .LVU542
 2093 0068 9342     		cmp	r3, r2
 2094 006a D9D0     		beq	.L185
 512:Core/Src/main.c ****         print_uart((char*)message);
 2095              		.loc 1 512 9 is_stmt 1 view .LVU543
 2096 006c 1B4C     		ldr	r4, .L195+20
 2097 006e 1C49     		ldr	r1, .L195+24
 2098 0070 2046     		mov	r0, r4
 2099 0072 FFF7FEFF 		bl	sprintf
 2100              	.LVL111:
 513:Core/Src/main.c ****       }
ARM GAS  /tmp/ccGpNQj9.s 			page 61


 2101              		.loc 1 513 9 view .LVU544
 2102 0076 2046     		mov	r0, r4
 2103 0078 FFF7FEFF 		bl	print_uart
 2104              	.LVL112:
 2105 007c D0E7     		b	.L185
 2106              	.L187:
 470:Core/Src/main.c ****   }  
 2107              		.loc 1 470 5 view .LVU545
 2108 007e FFF7FEFF 		bl	Error_Handler
 2109              	.LVL113:
 2110              	.L188:
 484:Core/Src/main.c ****     }
 2111              		.loc 1 484 7 view .LVU546
 2112 0082 FFF7FEFF 		bl	button1_pressed
 2113              	.LVL114:
 2114 0086 D3E7     		b	.L178
 2115              	.L189:
 487:Core/Src/main.c ****       ishold1 = 1;
 2116              		.loc 1 487 7 view .LVU547
 2117 0088 1648     		ldr	r0, .L195+28
 2118 008a FFF7FEFF 		bl	print_uart
 2119              	.LVL115:
 488:Core/Src/main.c ****     }
 2120              		.loc 1 488 7 view .LVU548
 488:Core/Src/main.c ****     }
 2121              		.loc 1 488 15 is_stmt 0 view .LVU549
 2122 008e 164B     		ldr	r3, .L195+32
 2123 0090 0122     		movs	r2, #1
 2124 0092 1A70     		strb	r2, [r3]
 2125 0094 D0E7     		b	.L179
 2126              	.L190:
 491:Core/Src/main.c ****     }
 2127              		.loc 1 491 7 is_stmt 1 view .LVU550
 2128 0096 FFF7FEFF 		bl	button1_holdtime
 2129              	.LVL116:
 2130 009a D0E7     		b	.L180
 2131              	.L191:
 495:Core/Src/main.c ****     }
 2132              		.loc 1 495 7 view .LVU551
 2133 009c FFF7FEFF 		bl	button2_pressed
 2134              	.LVL117:
 2135 00a0 D1E7     		b	.L181
 2136              	.L192:
 498:Core/Src/main.c ****       ishold2 = 1;
 2137              		.loc 1 498 7 view .LVU552
 2138 00a2 1248     		ldr	r0, .L195+36
 2139 00a4 FFF7FEFF 		bl	print_uart
 2140              	.LVL118:
 499:Core/Src/main.c ****     }
 2141              		.loc 1 499 7 view .LVU553
 499:Core/Src/main.c ****     }
 2142              		.loc 1 499 15 is_stmt 0 view .LVU554
 2143 00a8 114B     		ldr	r3, .L195+40
 2144 00aa 0122     		movs	r2, #1
 2145 00ac 1A70     		strb	r2, [r3]
 2146 00ae CEE7     		b	.L182
 2147              	.L193:
ARM GAS  /tmp/ccGpNQj9.s 			page 62


 502:Core/Src/main.c ****     }
 2148              		.loc 1 502 7 is_stmt 1 view .LVU555
 2149 00b0 FFF7FEFF 		bl	button2_holdtime
 2150              	.LVL119:
 2151 00b4 CEE7     		b	.L183
 2152              	.L194:
 507:Core/Src/main.c ****         print_uart((char*)message);
 2153              		.loc 1 507 9 view .LVU556
 2154 00b6 094C     		ldr	r4, .L195+20
 2155 00b8 0E49     		ldr	r1, .L195+44
 2156 00ba 2046     		mov	r0, r4
 2157 00bc FFF7FEFF 		bl	sprintf
 2158              	.LVL120:
 508:Core/Src/main.c ****       }
 2159              		.loc 1 508 9 view .LVU557
 2160 00c0 2046     		mov	r0, r4
 2161 00c2 FFF7FEFF 		bl	print_uart
 2162              	.LVL121:
 2163 00c6 CBE7     		b	.L184
 2164              	.L196:
 2165              		.align	2
 2166              	.L195:
 2167 00c8 00000000 		.word	htim3
 2168 00cc 00000000 		.word	state_button1_t
 2169 00d0 00000000 		.word	state_button2_t
 2170 00d4 00000000 		.word	pre_state_button1_t
 2171 00d8 00000000 		.word	pre_state_button2_t
 2172 00dc 00000000 		.word	message
 2173 00e0 38000000 		.word	.LC8
 2174 00e4 00000000 		.word	.LC5
 2175 00e8 00000000 		.word	ishold1
 2176 00ec 10000000 		.word	.LC6
 2177 00f0 00000000 		.word	ishold2
 2178 00f4 20000000 		.word	.LC7
 2179              		.cfi_endproc
 2180              	.LFE82:
 2182              		.global	message
 2183              		.section	.bss.message,"aw",%nobits
 2184              		.align	2
 2187              	message:
 2188 0000 00000000 		.space	35
 2188      00000000 
 2188      00000000 
 2188      00000000 
 2188      00000000 
 2189              		.global	ishold2
 2190              		.section	.bss.ishold2,"aw",%nobits
 2193              	ishold2:
 2194 0000 00       		.space	1
 2195              		.global	ishold1
 2196              		.section	.bss.ishold1,"aw",%nobits
 2199              	ishold1:
 2200 0000 00       		.space	1
 2201              		.global	mode3forled
 2202              		.section	.bss.mode3forled,"aw",%nobits
 2205              	mode3forled:
 2206 0000 00       		.space	1
ARM GAS  /tmp/ccGpNQj9.s 			page 63


 2207              		.global	mode2forled
 2208              		.section	.bss.mode2forled,"aw",%nobits
 2211              	mode2forled:
 2212 0000 00       		.space	1
 2213              		.global	stateofled
 2214              		.section	.bss.stateofled,"aw",%nobits
 2217              	stateofled:
 2218 0000 00       		.space	1
 2219              		.global	tim3period
 2220              		.section	.data.tim3period,"aw"
 2221              		.align	2
 2224              	tim3period:
 2225 0000 0F270000 		.word	9999
 2226              		.global	tim3scaler
 2227              		.section	.data.tim3scaler,"aw"
 2228              		.align	2
 2231              	tim3scaler:
 2232 0000 1F1C0000 		.word	7199
 2233              		.global	initialled1
 2234              		.section	.data.initialled1,"aw"
 2237              	initialled1:
 2238 0000 01       		.byte	1
 2239              		.global	hold_delay_s
 2240              		.section	.data.hold_delay_s,"aw"
 2241              		.align	2
 2244              	hold_delay_s:
 2245 0000 F4010000 		.word	500
 2246              		.global	bounce_delay_s
 2247              		.section	.data.bounce_delay_s,"aw"
 2248              		.align	2
 2251              	bounce_delay_s:
 2252 0000 32000000 		.word	50
 2253              		.global	t_press_s2
 2254              		.section	.bss.t_press_s2,"aw",%nobits
 2255              		.align	2
 2258              	t_press_s2:
 2259 0000 00000000 		.space	4
 2260              		.global	t_press_s1
 2261              		.section	.bss.t_press_s1,"aw",%nobits
 2262              		.align	2
 2265              	t_press_s1:
 2266 0000 00000000 		.space	4
 2267              		.global	t_diff_s2
 2268              		.section	.bss.t_diff_s2,"aw",%nobits
 2269              		.align	2
 2272              	t_diff_s2:
 2273 0000 00000000 		.space	4
 2274              		.global	t_diff_s1
 2275              		.section	.bss.t_diff_s1,"aw",%nobits
 2276              		.align	2
 2279              	t_diff_s1:
 2280 0000 00000000 		.space	4
 2281              		.global	t_0_s2
 2282              		.section	.bss.t_0_s2,"aw",%nobits
 2283              		.align	2
 2286              	t_0_s2:
 2287 0000 00000000 		.space	4
ARM GAS  /tmp/ccGpNQj9.s 			page 64


 2288              		.global	t_0_s1
 2289              		.section	.bss.t_0_s1,"aw",%nobits
 2290              		.align	2
 2293              	t_0_s1:
 2294 0000 00000000 		.space	4
 2295              		.global	t_s2
 2296              		.section	.bss.t_s2,"aw",%nobits
 2297              		.align	2
 2300              	t_s2:
 2301 0000 00000000 		.space	4
 2302              		.global	t_s1
 2303              		.section	.bss.t_s1,"aw",%nobits
 2304              		.align	2
 2307              	t_s1:
 2308 0000 00000000 		.space	4
 2309              		.global	state_button2
 2310              		.section	.data.state_button2,"aw"
 2313              	state_button2:
 2314 0000 01       		.byte	1
 2315              		.global	state_button1
 2316              		.section	.data.state_button1,"aw"
 2319              	state_button1:
 2320 0000 01       		.byte	1
 2321              		.global	pre_state_button2_t
 2322              		.section	.bss.pre_state_button2_t,"aw",%nobits
 2325              	pre_state_button2_t:
 2326 0000 00       		.space	1
 2327              		.global	pre_state_button1_t
 2328              		.section	.bss.pre_state_button1_t,"aw",%nobits
 2331              	pre_state_button1_t:
 2332 0000 00       		.space	1
 2333              		.global	state_button2_t
 2334              		.section	.bss.state_button2_t,"aw",%nobits
 2337              	state_button2_t:
 2338 0000 00       		.space	1
 2339              		.global	state_button1_t
 2340              		.section	.bss.state_button1_t,"aw",%nobits
 2343              	state_button1_t:
 2344 0000 00       		.space	1
 2345              		.global	huart1
 2346              		.section	.bss.huart1,"aw",%nobits
 2347              		.align	2
 2350              	huart1:
 2351 0000 00000000 		.space	72
 2351      00000000 
 2351      00000000 
 2351      00000000 
 2351      00000000 
 2352              		.global	htim3
 2353              		.section	.bss.htim3,"aw",%nobits
 2354              		.align	2
 2357              	htim3:
 2358 0000 00000000 		.space	72
 2358      00000000 
 2358      00000000 
 2358      00000000 
 2358      00000000 
ARM GAS  /tmp/ccGpNQj9.s 			page 65


 2359              		.text
 2360              	.Letext0:
 2361              		.file 3 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/machine/_default_types.h"
 2362              		.file 4 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/sys/_stdint.h"
 2363              		.file 5 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xb.h"
 2364              		.file 6 "/opt/gcc-arm-none-eabi/lib/gcc/arm-none-eabi/12.3.1/include/stddef.h"
 2365              		.file 7 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 2366              		.file 8 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc.h"
 2367              		.file 9 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc_ex.h"
 2368              		.file 10 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_gpio.h"
 2369              		.file 11 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 2370              		.file 12 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_tim.h"
 2371              		.file 13 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_uart.h"
 2372              		.file 14 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_tim_ex.h"
 2373              		.file 15 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/stdio.h"
 2374              		.file 16 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/string.h"
 2375              		.file 17 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
 2376              		.file 18 "<built-in>"
ARM GAS  /tmp/ccGpNQj9.s 			page 66


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
     /tmp/ccGpNQj9.s:19     .text.MX_GPIO_Init:00000000 $t
     /tmp/ccGpNQj9.s:24     .text.MX_GPIO_Init:00000000 MX_GPIO_Init
     /tmp/ccGpNQj9.s:183    .text.MX_GPIO_Init:000000b8 $d
     /tmp/ccGpNQj9.s:190    .text.initLED:00000000 $t
     /tmp/ccGpNQj9.s:196    .text.initLED:00000000 initLED
     /tmp/ccGpNQj9.s:251    .text.initLED:00000038 $d
     /tmp/ccGpNQj9.s:257    .text.function_mode1:00000000 $t
     /tmp/ccGpNQj9.s:263    .text.function_mode1:00000000 function_mode1
     /tmp/ccGpNQj9.s:321    .text.function_mode1:00000044 $d
     /tmp/ccGpNQj9.s:2237   .data.initialled1:00000000 initialled1
     /tmp/ccGpNQj9.s:328    .text.function_mode2:00000000 $t
     /tmp/ccGpNQj9.s:334    .text.function_mode2:00000000 function_mode2
     /tmp/ccGpNQj9.s:403    .text.function_mode2:0000004c $d
     /tmp/ccGpNQj9.s:2211   .bss.mode2forled:00000000 mode2forled
     /tmp/ccGpNQj9.s:408    .text.function_mode3:00000000 $t
     /tmp/ccGpNQj9.s:414    .text.function_mode3:00000000 function_mode3
     /tmp/ccGpNQj9.s:431    .text.function_mode3:0000000e $d
     /tmp/ccGpNQj9.s:435    .text.function_mode3:00000012 $t
     /tmp/ccGpNQj9.s:502    .text.function_mode3:00000064 $d
     /tmp/ccGpNQj9.s:2205   .bss.mode3forled:00000000 mode3forled
     /tmp/ccGpNQj9.s:507    .text.changemodeled:00000000 $t
     /tmp/ccGpNQj9.s:513    .text.changemodeled:00000000 changemodeled
     /tmp/ccGpNQj9.s:563    .text.changemodeled:0000002c $d
     /tmp/ccGpNQj9.s:2217   .bss.stateofled:00000000 stateofled
     /tmp/ccGpNQj9.s:569    .text.SM_ledmode:00000000 $t
     /tmp/ccGpNQj9.s:575    .text.SM_ledmode:00000000 SM_ledmode
     /tmp/ccGpNQj9.s:618    .text.SM_ledmode:00000024 $d
     /tmp/ccGpNQj9.s:623    .text.HAL_TIM_PeriodElapsedCallback:00000000 $t
     /tmp/ccGpNQj9.s:629    .text.HAL_TIM_PeriodElapsedCallback:00000000 HAL_TIM_PeriodElapsedCallback
     /tmp/ccGpNQj9.s:661    .text.HAL_TIM_PeriodElapsedCallback:00000010 $d
     /tmp/ccGpNQj9.s:2357   .bss.htim3:00000000 htim3
     /tmp/ccGpNQj9.s:666    .text.SM_button1:00000000 $t
     /tmp/ccGpNQj9.s:672    .text.SM_button1:00000000 SM_button1
     /tmp/ccGpNQj9.s:702    .text.SM_button1:0000001e $d
     /tmp/ccGpNQj9.s:710    .text.SM_button1:00000026 $t
     /tmp/ccGpNQj9.s:881    .text.SM_button1:000000dc $d
     /tmp/ccGpNQj9.s:2319   .data.state_button1:00000000 state_button1
     /tmp/ccGpNQj9.s:2343   .bss.state_button1_t:00000000 state_button1_t
     /tmp/ccGpNQj9.s:2331   .bss.pre_state_button1_t:00000000 pre_state_button1_t
     /tmp/ccGpNQj9.s:2293   .bss.t_0_s1:00000000 t_0_s1
     /tmp/ccGpNQj9.s:2307   .bss.t_s1:00000000 t_s1
     /tmp/ccGpNQj9.s:2279   .bss.t_diff_s1:00000000 t_diff_s1
     /tmp/ccGpNQj9.s:2251   .data.bounce_delay_s:00000000 bounce_delay_s
     /tmp/ccGpNQj9.s:2244   .data.hold_delay_s:00000000 hold_delay_s
     /tmp/ccGpNQj9.s:2265   .bss.t_press_s1:00000000 t_press_s1
     /tmp/ccGpNQj9.s:895    .text.SM_button2:00000000 $t
     /tmp/ccGpNQj9.s:901    .text.SM_button2:00000000 SM_button2
     /tmp/ccGpNQj9.s:931    .text.SM_button2:0000001e $d
     /tmp/ccGpNQj9.s:939    .text.SM_button2:00000026 $t
     /tmp/ccGpNQj9.s:1110   .text.SM_button2:000000dc $d
     /tmp/ccGpNQj9.s:2313   .data.state_button2:00000000 state_button2
     /tmp/ccGpNQj9.s:2337   .bss.state_button2_t:00000000 state_button2_t
     /tmp/ccGpNQj9.s:2325   .bss.pre_state_button2_t:00000000 pre_state_button2_t
     /tmp/ccGpNQj9.s:2286   .bss.t_0_s2:00000000 t_0_s2
     /tmp/ccGpNQj9.s:2300   .bss.t_s2:00000000 t_s2
ARM GAS  /tmp/ccGpNQj9.s 			page 67


     /tmp/ccGpNQj9.s:2272   .bss.t_diff_s2:00000000 t_diff_s2
     /tmp/ccGpNQj9.s:2258   .bss.t_press_s2:00000000 t_press_s2
     /tmp/ccGpNQj9.s:1124   .text.print_uart:00000000 $t
     /tmp/ccGpNQj9.s:1130   .text.print_uart:00000000 print_uart
     /tmp/ccGpNQj9.s:1161   .text.print_uart:00000018 $d
     /tmp/ccGpNQj9.s:2350   .bss.huart1:00000000 huart1
     /tmp/ccGpNQj9.s:1166   .rodata.button2_pressed.str1.4:00000000 $d
     /tmp/ccGpNQj9.s:1170   .text.button2_pressed:00000000 $t
     /tmp/ccGpNQj9.s:1176   .text.button2_pressed:00000000 button2_pressed
     /tmp/ccGpNQj9.s:1198   .text.button2_pressed:00000010 $d
     /tmp/ccGpNQj9.s:1203   .rodata.Error_Handler.str1.4:00000000 $d
     /tmp/ccGpNQj9.s:1207   .text.Error_Handler:00000000 $t
     /tmp/ccGpNQj9.s:1213   .text.Error_Handler:00000000 Error_Handler
     /tmp/ccGpNQj9.s:1250   .text.Error_Handler:0000000c $d
     /tmp/ccGpNQj9.s:1255   .text.MX_TIM3_Init:00000000 $t
     /tmp/ccGpNQj9.s:1260   .text.MX_TIM3_Init:00000000 MX_TIM3_Init
     /tmp/ccGpNQj9.s:1362   .text.MX_TIM3_Init:00000064 $d
     /tmp/ccGpNQj9.s:2231   .data.tim3scaler:00000000 tim3scaler
     /tmp/ccGpNQj9.s:2224   .data.tim3period:00000000 tim3period
     /tmp/ccGpNQj9.s:1370   .rodata.button1_pressed.str1.4:00000000 $d
     /tmp/ccGpNQj9.s:1377   .text.button1_pressed:00000000 $t
     /tmp/ccGpNQj9.s:1383   .text.button1_pressed:00000000 button1_pressed
     /tmp/ccGpNQj9.s:1471   .text.button1_pressed:00000064 $d
     /tmp/ccGpNQj9.s:2187   .bss.message:00000000 message
     /tmp/ccGpNQj9.s:1480   .rodata.button1_holdtime.str1.4:00000000 $d
     /tmp/ccGpNQj9.s:1484   .text.button1_holdtime:00000000 $t
     /tmp/ccGpNQj9.s:1490   .text.button1_holdtime:00000000 button1_holdtime
     /tmp/ccGpNQj9.s:1627   .text.button1_holdtime:0000009c $d
     /tmp/ccGpNQj9.s:2199   .bss.ishold1:00000000 ishold1
     /tmp/ccGpNQj9.s:1640   .text.button2_holdtime:00000000 $t
     /tmp/ccGpNQj9.s:1646   .text.button2_holdtime:00000000 button2_holdtime
     /tmp/ccGpNQj9.s:1783   .text.button2_holdtime:00000098 $d
     /tmp/ccGpNQj9.s:2193   .bss.ishold2:00000000 ishold2
     /tmp/ccGpNQj9.s:1796   .text.MX_USART1_UART_Init:00000000 $t
     /tmp/ccGpNQj9.s:1801   .text.MX_USART1_UART_Init:00000000 MX_USART1_UART_Init
     /tmp/ccGpNQj9.s:1855   .text.MX_USART1_UART_Init:0000002c $d
     /tmp/ccGpNQj9.s:1861   .text.SystemClock_Config:00000000 $t
     /tmp/ccGpNQj9.s:1867   .text.SystemClock_Config:00000000 SystemClock_Config
     /tmp/ccGpNQj9.s:1968   .rodata.main.str1.4:00000000 $d
     /tmp/ccGpNQj9.s:1981   .text.main:00000000 $t
     /tmp/ccGpNQj9.s:1987   .text.main:00000000 main
     /tmp/ccGpNQj9.s:2167   .text.main:000000c8 $d
     /tmp/ccGpNQj9.s:2184   .bss.message:00000000 $d
     /tmp/ccGpNQj9.s:2194   .bss.ishold2:00000000 $d
     /tmp/ccGpNQj9.s:2200   .bss.ishold1:00000000 $d
     /tmp/ccGpNQj9.s:2206   .bss.mode3forled:00000000 $d
     /tmp/ccGpNQj9.s:2212   .bss.mode2forled:00000000 $d
     /tmp/ccGpNQj9.s:2218   .bss.stateofled:00000000 $d
     /tmp/ccGpNQj9.s:2221   .data.tim3period:00000000 $d
     /tmp/ccGpNQj9.s:2228   .data.tim3scaler:00000000 $d
     /tmp/ccGpNQj9.s:2241   .data.hold_delay_s:00000000 $d
     /tmp/ccGpNQj9.s:2248   .data.bounce_delay_s:00000000 $d
     /tmp/ccGpNQj9.s:2255   .bss.t_press_s2:00000000 $d
     /tmp/ccGpNQj9.s:2262   .bss.t_press_s1:00000000 $d
     /tmp/ccGpNQj9.s:2269   .bss.t_diff_s2:00000000 $d
     /tmp/ccGpNQj9.s:2276   .bss.t_diff_s1:00000000 $d
     /tmp/ccGpNQj9.s:2283   .bss.t_0_s2:00000000 $d
ARM GAS  /tmp/ccGpNQj9.s 			page 68


     /tmp/ccGpNQj9.s:2290   .bss.t_0_s1:00000000 $d
     /tmp/ccGpNQj9.s:2297   .bss.t_s2:00000000 $d
     /tmp/ccGpNQj9.s:2304   .bss.t_s1:00000000 $d
     /tmp/ccGpNQj9.s:2326   .bss.pre_state_button2_t:00000000 $d
     /tmp/ccGpNQj9.s:2332   .bss.pre_state_button1_t:00000000 $d
     /tmp/ccGpNQj9.s:2338   .bss.state_button2_t:00000000 $d
     /tmp/ccGpNQj9.s:2344   .bss.state_button1_t:00000000 $d
     /tmp/ccGpNQj9.s:2347   .bss.huart1:00000000 $d
     /tmp/ccGpNQj9.s:2354   .bss.htim3:00000000 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_GPIO_TogglePin
HAL_GPIO_ReadPin
HAL_GetTick
strlen
HAL_UART_Transmit
HAL_TIM_Base_Init
HAL_TIM_ConfigClockSource
HAL_TIMEx_MasterConfigSynchronization
HAL_TIM_Base_Stop_IT
HAL_TIM_Base_DeInit
HAL_TIM_Base_Start_IT
sprintf
HAL_UART_Init
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_Init
